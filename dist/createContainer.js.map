{"version":3,"sources":["createContainer.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;AAee,SAAS,eAAT,GAAmE;AAAA,MAA1C,UAA0C,yDAA7B,EAA6B;AAAA,MAAzB,kBAAyB,yDAAJ,EAAI;;;AAEhF,MAAM,cAAc,OAAO,IAAP,CAAY,UAAZ,EACjB,MADiB,CACV;AAAA,WAAQ,8BAAa,WAAW,IAAX,CAAb,CAAR;AAAA,GADU,EAEjB,GAFiB,CAEb;AAAA,WAAS,EAAC,UAAU,IAAX,EAAiB,YAAY,WAAW,IAAX,CAA7B,EAAT;AAAA,GAFa,CAApB;;AAIA,MAAM,qBAAqB,OAAO,IAAP,CAAY,UAAZ,EACxB,MADwB,CACjB;AAAA,WAAQ,CAAC,8BAAa,WAAW,IAAX,CAAb,CAAT;AAAA,GADiB,EAExB,MAFwB,CAEjB,UAAC,KAAD,EAAQ,IAAR;AAAA,WAAiB,OAAO,MAAP,CAAc,KAAd,sBAAuB,IAAvB,EAA8B,WAAW,IAAX,CAA9B,EAAjB;AAAA,GAFiB,EAEkD,EAFlD,CAA3B;;AANgF,8BAU7B,kBAV6B,CAUzE,SAVyE;AAAA,MAUzE,SAVyE,yCAU7D,EAV6D;AAAA,8BAU7B,kBAV6B,CAUzD,eAVyD;;AAAA,MAUzD,gBAVyD,yCAUvC,iBAAE,IAVqC;;AAYhF,SAAO;AAAA,WAAgC,gBAAM,WAAN,CAAkB;;AAEvD,iBAAW,SAF4C;;AAIvD,qBAJuD,6BAIrC;AAChB,eAAO,kBAAP;AACD,OANsD;AAQvD,wBARuD,gCAQlC;;AAEnB,YAAM,OAAO,IAAb;;AAEA,aAAK,KAAL,GAAa,YAAY,GAAZ,CACT;AAAA,iBAAO,IAAI,UAAJ,CAAe,QAAf,CAAwB;AAAA,mBAAO,KAAK,QAAL,qBAAgB,IAAI,QAApB,EAA+B,GAA/B,EAAP;AAAA,WAAxB,CAAP;AAAA,SADS,KAEN,EAFP;AAGD,OAfsD;AAiBvD,0BAjBuD,kCAiBhC;;AAErB,aAAK,KAAL,CAAW,OAAX,CAAmB;AAAA,iBAAS,OAAT;AAAA,SAAnB;AACD,OApBsD;AAsBvD,YAtBuD,oBAsB9C;AACP,eAAO,8BAAC,4BAAD,eAAkC,KAAK,KAAvC,EAAkD,kBAAlD,EAA0E,KAAK,KAA/E,EAAP;AACD;AAxBsD,KAAlB,CAAhC;AAAA,GAAP;AA0BD","file":"createContainer.js","sourcesContent":["import React from 'react'\nimport _ from 'lodash'\n\nimport {isObservable} from './support/kefirUtils'\n\n\n/**\n * If a prop is an observable, create a listener and pass the observed values as props.\n * Otherwise, pass the prop into the child component, which must be a stateless functional component.\n *\n * containerProps are props to pass to the container\n *\n * Note: container defaultProps get passed to child\n *\n * @param childProps to pass to child container\n * @param parentDefaultProps - default props and propTypes of parent container\n * @returns {Function}\n */\nexport default function createContainer(childProps = {}, parentDefaultProps = {}) {\n\n  const observables = Object.keys(childProps)\n    .filter(prop => isObservable(childProps[prop]))\n    .map(prop => ({property: prop, observable: childProps[prop]}))\n\n  const nonObservableProps = Object.keys(childProps)\n    .filter(prop => !isObservable(childProps[prop]))\n    .reduce((total, prop) => Object.assign(total, {[prop]: childProps[prop]}), {})\n\n  const {propTypes = {}, getDefaultProps = _.noop} = parentDefaultProps\n\n  return StatelessFunctionalComponent => React.createClass({\n\n    propTypes: propTypes,\n\n    getDefaultProps() {\n      return getDefaultProps()\n    },\n\n    componentWillMount() {\n\n      const that = this\n\n      that.unsub = observables.map(\n          obj => obj.observable._onValue(val => that.setState({[obj.property]: val}))\n        ) || []\n    },\n\n    componentWillUnmount() {\n\n      this.unsub.forEach(unsub => unsub())\n    },\n\n    render() {\n      return <StatelessFunctionalComponent {...this.state} {...nonObservableProps} {...this.props} />\n    }\n  })\n}\n"]}