{"version":3,"sources":["AppState.js"],"names":[],"mappings":";;;;;;;;QAyBgB,a,GAAA,a;QA0BA,a,GAAA,a;;AAnDhB;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;AAGA,IAAM,WAAW,EAAjB;;AAEA,IAAM,aAAa,EAAnB;AACA,IAAM,YAAY,EAAlB;;;;;;;;;;;;;;;AAeO,SAAS,aAAT,CAAuB,OAAvB,QAAyF;AAAA,MAAxD,OAAwD,QAAxD,OAAwD;AAAA,MAA/C,QAA+C,QAA/C,QAA+C;AAAA,MAArC,eAAqC,QAArC,eAAqC;AAAA,MAApB,iBAAoB,QAApB,iBAAoB;;;AAE9F,MAAM,QAAQ,2BAAY,OAAZ,EAAqB,EAAC,gBAAD,EAAU,kBAAV,EAAoB,gCAApB,EAAqC,oCAArC,EAArB,0BAAd;;;AAGA,aAAW,IAAX,CAAgB,KAAhB;;;AAGA,MAAM,mBAAmB,WAAW,GAAX,CAAe;AAAA,WAAK,EAAE,UAAP;AAAA,GAAf,CAAzB;AACA,MAAM,qBAAqB,gBAAM,OAAN,CAAc,gBAAd,EAAgC;AAAA,sCAAI,WAAJ;AAAI,iBAAJ;AAAA;;AAAA,WACzD,YAAY,MAAZ,CACE,UAAC,MAAD,EAAS,KAAT,EAAgB,CAAhB;AAAA,aAAsB,OAAO,MAAP,CAAc,MAAd,2BAA2B,WAAW,CAAX,EAAc,IAAzC,EAAkD,MAAM,KAAxD,EAAtB;AAAA,KADF,EACyF,EADzF,CADyD;AAAA,GAAhC,CAA3B;;AAMA,SAAO,MAAP,CAAc,QAAd,EAAwB,EAAC,sCAAD,EAAxB;;;AAGA,SAAO,MAAP,CAAc,QAAd,eAA4B,MAAM,KAAlC;;;AAGA,QAAM,UAAN,CAAiB,OAAjB,CAAyB;AAAA,WACvB,CAAC,MAAM,WAAN,IAAqB,EAAtB,EAA0B,OAA1B,CAAkC;AAAA,aAAc,WAAW;AAAA,eAAM,wBAAc,IAAd,CAAmB,UAAnB,CAAN;AAAA,OAAX,EAAiD,CAAjD,CAAd;AAAA,KAAlC,CADuB;AAAA,GAAzB;AAGD;;AAEM,SAAS,aAAT,CAAuB,OAAvB,SAA4E;AAAA,MAA3C,KAA2C,SAA3C,KAA2C;AAAA,MAApC,mBAAoC,SAApC,mBAAoC;AAAA,MAAf,YAAe,SAAf,YAAe;;;AAEjF,MAAM,QAAQ,2BAAY,OAAZ,EAAqB,EAAC,YAAD,EAAQ,wCAAR,EAA6B,0BAA7B,EAArB,0BAAd;;;AAGA,YAAU,IAAV,CAAe,KAAf;;;AAGA,SAAO,MAAP,CAAc,QAAd,EAAwB,MAAM,eAA9B;;;AAGA,MAAM,WAAW,SAAX,QAAW;AAAA,WAAM,SAAN;AAAA,GAAjB;;AAEA,SAAO,IAAP,CAAY,MAAM,WAAlB,EAA+B,OAA/B,CAAuC;AAAA,WAAO,MAAM,WAAN,CAAkB,GAAlB,EAAuB,OAAvB,CAA+B,QAA/B,CAAP;AAAA,GAAvC;AACD;;kBAEc,Q","file":"AppState.js","sourcesContent":["import Kefir from 'kefir'\n\nimport AppDispatcher from './AppDispatcher'\nimport createStore from './createStore'\nimport createSagas from './createSagas'\n\n\nconst AppState = {}\n\nconst _storeInfo = []\nconst _sagaInfo = []\n\n/**\n * See #createStore for docs.\n *\n * This creates the store, adds it to the store info collection,\n * then recreates the combined AppState observable (optional)\n *\n * @param storeName\n * @param channel\n * @param Actions\n * @param Reducers\n * @param ActionFunctions\n * @param ActionObservables\n */\nexport function registerStore(channel, {Actions, Reducers, ActionFunctions, ActionObservables}) {\n\n  const store = createStore(channel, {Actions, Reducers, ActionFunctions, ActionObservables})(AppDispatcher)\n\n  // add store to store info collection\n  _storeInfo.push(store)\n\n  // update app state observable with latest\n  const storeObservables = _storeInfo.map(x => x.observable)\n  const appStateObservable = Kefir.combine(storeObservables, (...observables) =>\n    observables.reduce(\n      (stores, store, i) => Object.assign(stores, {[`${_storeInfo[i].name}`]: store.state}), {}\n    )\n  )\n\n  Object.assign(AppState, {appStateObservable})\n\n  // add store to AppState\n  Object.assign(AppState, {...store.store})\n\n  // setup one-way data flow + side effects\n  store.observable.onValue(state =>\n    (state.sideEffects || []).forEach(sideEffect => setTimeout(() => AppDispatcher.emit(sideEffect), 0))\n  )\n}\n\nexport function registerSagas(channel, {Sagas, SagaActionFunctions, SagaHandlers}) {\n\n  const sagas = createSagas(channel, {Sagas, SagaActionFunctions, SagaHandlers})(AppDispatcher)\n\n  // store\n  _sagaInfo.push(sagas)\n\n  // add action functions to app state\n  Object.assign(AppState, sagas.actionFunctions)\n\n  // setup one-way data flow\n  const callback = () => undefined\n\n  Object.keys(sagas.observables).forEach(obs => sagas.observables[obs].onValue(callback))\n}\n\nexport default AppState\n"]}