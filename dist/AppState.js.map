{"version":3,"sources":["AppState.js"],"names":["registerStore","registerSagas","AppState","_storeInfo","_sagaInfo","channel","Actions","Reducers","ActionFunctions","ActionObservables","store","push","storeStateObservables","map","x","observable","appStateObservable","combine","observables","reduce","storeState","i","Object","assign","name","state","onValue","sideEffects","forEach","setTimeout","emit","sideEffect","Sagas","SagaActionFunctions","SagaHandlers","sagas","actionFunctions","resultObservables","callback","undefined","keys","obs"],"mappings":";;;;;;;;;QAwBgBA,a,GAAAA,a;QAuCAC,a,GAAAA,a;;AA/DhB;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;AAGA,IAAMC,WAAW,EAAjB;;AAEO,IAAMC,kCAAa,EAAnB;AACA,IAAMC,gCAAY,EAAlB;;AAEP;;;;;;;;;;;;AAYO,SAASJ,aAAT,CACLK,OADK,QAC6D;AAAA,MAAxDC,OAAwD,QAAxDA,OAAwD;AAAA,MAA/CC,QAA+C,QAA/CA,QAA+C;AAAA,MAArCC,eAAqC,QAArCA,eAAqC;AAAA,MAApBC,iBAAoB,QAApBA,iBAAoB;;;AAElE,MAAMC,QAAQ,2BACZL,OADY,EAEZ,EAACC,gBAAD,EAAUC,kBAAV,EAAoBC,gCAApB,EAAqCC,oCAArC,EAFY,0BAAd;;AAKA;AACAN,aAAWQ,IAAX,CAAgBD,KAAhB;;AAEA;AACA,MAAME,wBAAwBT,WAAWU,GAAX,CAAe;AAAA,WAAKC,EAAEC,UAAP;AAAA,GAAf,CAA9B;AACA,MAAMC,qBAAqB,gBAAMC,OAAN;AACzB;AACAL,uBAFyB;AAGzB;AACA;AAAA,sCAAIM,WAAJ;AAAIA,iBAAJ;AAAA;;AAAA,WAAoBA,YAAYC,MAAZ,CAClB,UAACH,kBAAD,EAAqBI,UAArB,EAAiCC,CAAjC;AAAA,aAAuCC,OAAOC,MAAP,CACrCP,kBADqC,2BAEhCb,WAAWkB,CAAX,EAAcG,IAFkB,EAETJ,WAAWK,KAFF,EAAvC;AAAA,KADkB,EAKlB,EALkB,CAApB;AAAA,GAJyB,CAA3B;;AAaAH,SAAOC,MAAP,CAAcrB,QAAd,EAAwB,EAACc,sCAAD,EAAxB;;AAEA;AACAM,SAAOC,MAAP,CAAcrB,QAAd,eAA4BQ,MAAMA,KAAlC;;AAEA;AACAA,QAAMK,UAAN,CAAiBW,OAAjB,CAAyB;AAAA,WACvB,CAACD,MAAME,WAAN,IAAqB,EAAtB,EAA0BC,OAA1B,CACE;AAAA,aAAcC,WAAW;AAAA,eAAM,wBAAcC,IAAd,CAAmBC,UAAnB,CAAN;AAAA,OAAX,EAAiD,CAAjD,CAAd;AAAA,KADF,CADuB;AAAA,GAAzB;AAKD;;AAEM,SAAS9B,aAAT,CAAuBI,OAAvB,SAA4E;AAAA,MAA3C2B,KAA2C,SAA3CA,KAA2C;AAAA,MAApCC,mBAAoC,SAApCA,mBAAoC;AAAA,MAAfC,YAAe,SAAfA,YAAe;;;AAEjF,MAAMC,QAAQ,2BAAY9B,OAAZ,EAAqB,EAAC2B,YAAD,EAAQC,wCAAR,EAA6BC,0BAA7B,EAArB,0BAAd;;AAEA;AACA9B,YAAUO,IAAV,CAAewB,KAAf;;AAEA;AACAb,SAAOC,MAAP,CAAcrB,QAAd,EAAwBiC,MAAMC,eAA9B,EAA+CD,MAAME,iBAArD;;AAEA;AACA,MAAMC,WAAW,SAAXA,QAAW;AAAA,WAAMC,SAAN;AAAA,GAAjB;;AAEAjB,SAAOkB,IAAP,CAAYL,MAAMjB,WAAlB,EAA+BU,OAA/B,CAAuC;AAAA,WAAOO,MAAMjB,WAAN,CAAkBuB,GAAlB,EAAuBf,OAAvB,CAA+BY,QAA/B,CAAP;AAAA,GAAvC;AACD;;kBAEcpC,Q","file":"AppState.js","sourcesContent":["import Kefir from 'kefir'\n\nimport AppDispatcher from './appdispatcher/AppDispatcher'\nimport createStore from './stores/createStore'\nimport createSagas from './stores/createSagas'\n\n\nconst AppState = {}\n\nexport const _storeInfo = []\nexport const _sagaInfo = []\n\n/**\n * This actually creates _and_ registers a store.\n *\n * @param {String} channel\n * @param {Map<String,*>} Actions - map of action types\n * @param {Map<Action,Function>} Reducers - map of reducers indexed by Action\n * @param {Map<Action,Function>} ActionFunctions - map of action functions indexed by\n * Actions\n * @param {Map<String,Function>} ActionObservables (optional) - higher order functions\n * that take the StoreObservable as input and return an observable that selects parts\n * of the state tree. **This will probably be deprecated.**\n */\nexport function registerStore(\n  channel, {Actions, Reducers, ActionFunctions, ActionObservables}) {\n\n  const store = createStore(\n    channel,\n    {Actions, Reducers, ActionFunctions, ActionObservables}\n  )(AppDispatcher)\n\n  // add store to store info collection\n  _storeInfo.push(store)\n\n  // update app state observable with latest\n  const storeStateObservables = _storeInfo.map(x => x.observable)\n  const appStateObservable = Kefir.combine(\n    // this fires when any of the store state observables change\n    storeStateObservables,\n    // this combines all the store states into a single state\n    (...observables) => observables.reduce(\n      (appStateObservable, storeState, i) => Object.assign(\n        appStateObservable,\n        {[`${_storeInfo[i].name}`]: storeState.state}\n      ),\n      {}\n    )\n  )\n\n  Object.assign(AppState, {appStateObservable})\n\n  // add store to AppState\n  Object.assign(AppState, {...store.store})\n\n  // setup one-way data flow + side effects\n  store.observable.onValue(state =>\n    (state.sideEffects || []).forEach(\n      sideEffect => setTimeout(() => AppDispatcher.emit(sideEffect), 0)\n    )\n  )\n}\n\nexport function registerSagas(channel, {Sagas, SagaActionFunctions, SagaHandlers}) {\n\n  const sagas = createSagas(channel, {Sagas, SagaActionFunctions, SagaHandlers})(AppDispatcher)\n\n  // store\n  _sagaInfo.push(sagas)\n\n  // add action functions and result observables to app state\n  Object.assign(AppState, sagas.actionFunctions, sagas.resultObservables)\n\n  // setup one-way data flow\n  const callback = () => undefined\n\n  Object.keys(sagas.observables).forEach(obs => sagas.observables[obs].onValue(callback))\n}\n\nexport default AppState\n"]}