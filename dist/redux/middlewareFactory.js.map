{"version":3,"sources":["redux/middlewareFactory.js"],"names":["middlewareFactory","dispatch","rawMiddleware","state","store","getState","middleware","map","__middleware","setState","_state","spyOnAppDispatcher","AppDispatcher","flatMap","reduce","chain","_middleware","transformedAction","action","allowContinue","next","_action","filter","constant"],"mappings":";;;;;kBAGwBA,iB;;AAHxB;;;;;;AAGe,SAASA,iBAAT,OAAsD;AAAA,MAA1BC,QAA0B,QAA1BA,QAA0B;AAAA,MAAhBC,aAAgB,QAAhBA,aAAgB;;;AAEnE,MAAIC,QAAQ,IAAZ;AACA,MAAMC,QAAQ;AACZH,sBADY;AAEZI,cAAU;AAAA,aAAMF,KAAN;AAAA;AAFE,GAAd;AAIA,MAAMG,aAAaJ,cAAcK,GAAd,CAAkB;AAAA,WAAgBC,aAAaJ,KAAb,CAAhB;AAAA,GAAlB,CAAnB;;AAEA,SAAO;AACLK,cAAU;AAAA,aAAUN,QAAQO,MAAlB;AAAA,KADL;AAELC,sBAFK,qCAE+B;AAAA,UAAhBC,aAAgB,SAAhBA,aAAgB;;AAClC,aAAOA;AACL;AADK,OAEJC,OAFI,CAEI;AAAA,eACPP,WAAWQ,MAAX,CACE,UAACC,KAAD,EAAQC,WAAR,EAAwB;AACtB,cAAIC,oBAAoBC,MAAxB;AACA,cAAIC,gBAAgB,KAApB;AACA;AACA;AACA,cAAMC,OAAO,SAAPA,IAAO,UAAW;AACtBH,gCAAoBI,OAApB;AACAF,4BAAgB,IAAhB;AACD,WAHD;;AAKA,iBAAOJ,MACJO,MADI,CACG,mBAAW;AACjBN,wBAAYI,IAAZ,EAAkBC,OAAlB;AACA,mBAAOF,aAAP;AACD,WAJI,EAKJZ,GALI,CAKA;AAAA,mBAAMU,iBAAN;AAAA,WALA,CAAP;AAMD,SAjBH,EAkBE,gBAAMM,QAAN,CAAeL,MAAf,CAlBF,CADO;AAAA,OAFJ,CAAP;AAwBD;AA3BI,GAAP;AA6BD","file":"middlewareFactory.js","sourcesContent":["import kefir from 'kefir'\n\n\nexport default function middlewareFactory({dispatch, rawMiddleware}) {\n\n  let state = null\n  const store = {\n    dispatch,\n    getState: () => state\n  }\n  const middleware = rawMiddleware.map(__middleware => __middleware(store))\n\n  return {\n    setState: _state => state = _state,\n    spyOnAppDispatcher({AppDispatcher}) {\n      return AppDispatcher\n        // this turns the middlewares into a stream of filters\n        .flatMap(action =>\n          middleware.reduce(\n            (chain, _middleware) => {\n              let transformedAction = action\n              let allowContinue = false\n              // the \"next\" action doesn't actually do anything.... it just tells the chain of\n              // filters to continue. But also allows the middleware to transfom the action\n              const next = _action => {\n                transformedAction = _action\n                allowContinue = true\n              }\n\n              return chain\n                .filter(_action => {\n                  _middleware(next)(_action)\n                  return allowContinue\n                })\n                .map(() => transformedAction)\n            },\n            kefir.constant(action)\n          )\n        )\n    }\n  }\n}\n"]}