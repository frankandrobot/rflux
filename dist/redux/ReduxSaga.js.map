{"version":3,"sources":["redux/ReduxSaga.js"],"names":[],"mappings":"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","file":"ReduxSaga.js","sourcesContent":["import assert from '../internal/assert'\n\nimport Kefir from 'kefir'\n\nimport kefirEmitter from '../utils/kefirEmitter'\nimport isObservable from '../internal/isObservable'\nimport uuid from '../internal/uuid'\n\n\nexport const fakeAppDispatcher = kefirEmitter()\nexport const sagaMessageBus = kefirEmitter()\n\n/**\n * Call the action and return the result (as an observable)\n */\nconst callObservable = sagaMessageBus\n  .filter(action => action.action === 'CALL')\n  .map(action => action.payload)\n  .flatMap(action => {\n\n    const callId = action.callId\n    const result = action.fn(...action.args)\n    const resultObservable = isObservable(result) ? result : Kefir.constant(result)\n\n    return resultObservable.map(rslt => ({callId, rslt}))\n  })\n  .onValue(() => undefined)\n\n/**\n * @param {String} channel\n * @param {Map} Sagas - map whose keys are the names of the side effects\n * @param {Map} SagaActionFunctions - (optional) map of action functions\n * @param {Map} SagaHandlers - map of handler functions\n * @returns {Object} redux middleware\n */\nexport function reduxSagaMiddleware(channel, {Sagas, SagaActionFunctions, SagaHandlers}) {\n\n  assert(typeof channel === 'string', 'Needs a channel and it needs to be a string')\n  assert(Sagas, 'Need Sagas')\n  assert(SagaHandlers, 'Need SagaHandlers')\n\n  //every side effect must map to an action function and handler\n  Object.keys(Sagas).forEach(action => {\n    if (SagaActionFunctions) {\n      assert(SagaActionFunctions[action], `Channel ${channel} is missing side effect action function \"${action}\"`)\n    }\n    assert(SagaHandlers[action], `Channel ${channel} is missing side effect handler \"${action}\"`)\n  })\n\n  SagaActionFunctions = SagaActionFunctions || {}\n\n  return () => next => action => {\n\n    setTimeout(() => SagaHandlers[action.type](action), 0)\n    setTimeout(() => fakeAppDispatcher.emit(action), 0)\n\n    return next(action)\n  }\n}\n\nexport class ReduxSaga {\n\n  constructor(store) {\n\n    this.store = store\n  }\n\n  put(action) {\n    setTimeout(() => this.store.dispatch(action), 0)\n\n    return Kefir.constant(action) // streamified so we can chain together\n  }\n\n  call(fn, ...args) {\n\n    const callId = uuid()\n\n    setTimeout(() => sagaMessageBus.emit({action: 'CALL', payload: {fn, args, callId}}), 0)\n\n    return callObservable.filter(fn => fn.callId === callId).map(fn => fn.rslt).take(1)\n  }\n\n  listen(channel, actionType) {\n\n    return fakeAppDispatcher\n      .filter(action => action.channel === channel && action.actionType === actionType)\n      .map(action => action.payload)\n  }\n}\n"]}