{"version":3,"sources":["stores/sagaInterfaceFactory.js"],"names":["sagaInterfaceFactory","AppDispatcher","appStateObservable","sideEffects","callObservable","filter","action","map","payload","flatMap","callId","result","fn","args","resultObservable","constant","rslt","onValue","undefined","put","setTimeout","emit","call","take","listen","channel","actionType","getState"],"mappings":";;;;;kBAOwBA,oB;;AAPxB;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;AAGe,SAASA,oBAAT,OAAmE;AAAA,MAApCC,aAAoC,QAApCA,aAAoC;AAAA,MAArBC,kBAAqB,QAArBA,kBAAqB;;;AAEhF,MAAMC,cAAc,6BAApB;AACA,MAAMC,iBAAiBD,YACpBE,MADoB,CACb;AAAA,WAAUC,OAAOA,MAAP,KAAkB,MAA5B;AAAA,GADa,EAEpBC,GAFoB,CAEhB;AAAA,WAAUD,OAAOE,OAAjB;AAAA,GAFgB,EAGpBC,OAHoB,CAGZ,kBAAU;;AAEjB,QAAMC,SAASJ,OAAOI,MAAtB;AACA,QAAMC,SAASL,OAAOM,EAAP,kCAAaN,OAAOO,IAApB,EAAf;AACA,QAAMC,mBAAmB,4BAAaH,MAAb,IAAuBA,MAAvB,GAAgC,gBAAMI,QAAN,CAAeJ,MAAf,CAAzD;;AAEA,WAAOG,iBAAiBP,GAAjB,CAAqB;AAAA,aAAS,EAACG,cAAD,EAASM,UAAT,EAAT;AAAA,KAArB,CAAP;AACD,GAVoB,EAWpBC,OAXoB,CAWZ;AAAA,WAAMC,SAAN;AAAA,GAXY,CAAvB;;AAcA,WAASC,GAAT,CAAab,MAAb,EAAqB;;AAEnBc,eAAW;AAAA,aAAMnB,cAAcoB,IAAd,CAAmBf,MAAnB,CAAN;AAAA,KAAX,EAA6C,CAA7C;;AAEA,WAAO,gBAAMS,QAAN,CAAeT,MAAf,CAAP,CAJmB,CAIW;AAC/B;;AAGD,WAASgB,IAAT,CAAcV,EAAd,EAA2B;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AAEzB,QAAMH,SAAS,qBAAf;;AAEAU,eAAW;AAAA,aAAMjB,YAAYkB,IAAZ,CAAiB,EAACf,QAAQ,MAAT,EAAiBE,SAAS,EAACI,MAAD,EAAKC,UAAL,EAAWH,cAAX,EAA1B,EAAjB,CAAN;AAAA,KAAX,EAAkF,CAAlF;;AAEA,WAAON,eAAeC,MAAf,CAAsB;AAAA,aAAMO,GAAGF,MAAH,KAAcA,MAApB;AAAA,KAAtB,EAAkDH,GAAlD,CAAsD;AAAA,aAAMK,GAAGI,IAAT;AAAA,KAAtD,EAAqEO,IAArE,CAA0E,CAA1E,CAAP;AACD;;AAGD,WAASC,MAAT,CAAgBC,OAAhB,EAAyBC,UAAzB,EAAqC;;AAEnC,WAAOzB,cACJI,MADI,CACG;AAAA,aAAUC,OAAOmB,OAAP,KAAmBA,OAAnB,IAA8BnB,OAAOoB,UAAP,KAAsBA,UAA9D;AAAA,KADH,EAEJnB,GAFI,CAEA;AAAA,aAAUD,OAAOE,OAAjB;AAAA,KAFA,CAAP;AAGD;;AAGD,WAASmB,QAAT,GAAoB;;AAElB,WAAOzB,kBAAP;AACD;;AAGD,SAAO;AACLC,4BADK;AAELgB,YAFK;AAGLG,cAHK;AAILE,kBAJK;AAKLG;AALK,GAAP;AAOD","file":"sagaInterfaceFactory.js","sourcesContent":["import Kefir from 'kefir'\n\nimport kefirEmitter from '../utils/kefirEmitter'\nimport isObservable from '../internal/isObservable'\nimport uuid from '../internal/uuid'\n\n\nexport default function sagaInterfaceFactory({AppDispatcher, appStateObservable}) {\n\n  const sideEffects = kefirEmitter()\n  const callObservable = sideEffects\n    .filter(action => action.action === 'CALL')\n    .map(action => action.payload)\n    .flatMap(action => {\n\n      const callId = action.callId\n      const result = action.fn(...action.args)\n      const resultObservable = isObservable(result) ? result : Kefir.constant(result)\n\n      return resultObservable.map(rslt => ({callId, rslt}))\n    })\n    .onValue(() => undefined)\n\n\n  function put(action) {\n\n    setTimeout(() => AppDispatcher.emit(action), 0)\n\n    return Kefir.constant(action) // streamified so we can chain together\n  }\n\n\n  function call(fn, ...args) {\n\n    const callId = uuid()\n\n    setTimeout(() => sideEffects.emit({action: 'CALL', payload: {fn, args, callId}}), 0)\n\n    return callObservable.filter(fn => fn.callId === callId).map(fn => fn.rslt).take(1)\n  }\n\n\n  function listen(channel, actionType) {\n\n    return AppDispatcher\n      .filter(action => action.channel === channel && action.actionType === actionType)\n      .map(action => action.payload)\n  }\n\n\n  function getState() {\n\n    return appStateObservable\n  }\n\n\n  return {\n    sideEffects,\n    put,\n    call,\n    listen,\n    getState\n  }\n}\n"]}