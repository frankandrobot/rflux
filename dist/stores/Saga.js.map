{"version":3,"sources":["stores/Saga.js"],"names":[],"mappings":";;;;;;QA0BgB,G,GAAA,G;QAOA,I,GAAA,I;QASA,M,GAAA,M;;AA1ChB;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;AAGO,IAAM,oCAAc,6BAApB;;AAIP,IAAM,iBAAiB,YACpB,MADoB,CACb;AAAA,SAAU,OAAO,MAAP,KAAkB,MAA5B;AAAA,CADa,EAEpB,GAFoB,CAEhB;AAAA,SAAU,OAAO,OAAjB;AAAA,CAFgB,EAGpB,OAHoB,CAGZ,kBAAU;;AAEjB,MAAM,SAAS,OAAO,MAAtB;AACA,MAAM,SAAS,OAAO,EAAP,kCAAa,OAAO,IAApB,EAAf;AACA,MAAM,mBAAmB,4BAAa,MAAb,IAAuB,MAAvB,GAAgC,gBAAM,QAAN,CAAe,MAAf,CAAzD;;AAEA,SAAO,iBAAiB,GAAjB,CAAqB;AAAA,WAAS,EAAC,cAAD,EAAS,UAAT,EAAT;AAAA,GAArB,CAAP;AACD,CAVoB,EAWpB,OAXoB,CAWZ;AAAA,SAAM,SAAN;AAAA,CAXY,CAAvB;;AAaO,SAAS,GAAT,CAAa,MAAb,EAAqB;;AAE1B,aAAW;AAAA,WAAM,wBAAc,IAAd,CAAmB,MAAnB,CAAN;AAAA,GAAX,EAA6C,CAA7C;;AAEA,SAAO,gBAAM,QAAN,CAAe,MAAf,CAAP,C;AACD;;AAEM,SAAS,IAAT,CAAc,EAAd,EAA2B;AAAA,oCAAN,IAAM;AAAN,QAAM;AAAA;;AAEhC,MAAM,SAAS,qBAAf;;AAEA,aAAW;AAAA,WAAM,YAAY,IAAZ,CAAiB,EAAC,QAAQ,MAAT,EAAiB,SAAS,EAAC,MAAD,EAAK,UAAL,EAAW,cAAX,EAA1B,EAAjB,CAAN;AAAA,GAAX,EAAkF,CAAlF;;AAEA,SAAO,eAAe,MAAf,CAAsB;AAAA,WAAM,GAAG,MAAH,KAAc,MAApB;AAAA,GAAtB,EAAkD,GAAlD,CAAsD;AAAA,WAAM,GAAG,IAAT;AAAA,GAAtD,EAAqE,IAArE,CAA0E,CAA1E,CAAP;AACD;;AAEM,SAAS,MAAT,CAAgB,OAAhB,EAAyB,UAAzB,EAAqC;;AAE1C,SAAO,wBACJ,MADI,CACG;AAAA,WAAU,OAAO,OAAP,KAAmB,OAAnB,IAA8B,OAAO,UAAP,KAAsB,UAA9D;AAAA,GADH,EAEJ,GAFI,CAEA;AAAA,WAAU,OAAO,OAAjB;AAAA,GAFA,CAAP;AAGD","file":"Saga.js","sourcesContent":["import Kefir from 'kefir'\n\nimport kefirEmitter from '../utils/kefirEmitter'\nimport isObservable from '../internal/isObservable'\nimport uuid from '../internal/uuid'\n\nimport AppDispatcher from './../appdispatcher/AppDispatcher'\n\n\nexport const sideEffects = kefirEmitter()\n\n\n\nconst callObservable = sideEffects\n  .filter(action => action.action === 'CALL')\n  .map(action => action.payload)\n  .flatMap(action => {\n\n    const callId = action.callId\n    const result = action.fn(...action.args)\n    const resultObservable = isObservable(result) ? result : Kefir.constant(result)\n\n    return resultObservable.map(rslt => ({callId, rslt}))\n  })\n  .onValue(() => undefined)\n\nexport function put(action) {\n\n  setTimeout(() => AppDispatcher.emit(action), 0)\n\n  return Kefir.constant(action) // streamified so we can chain together\n}\n\nexport function call(fn, ...args) {\n\n  const callId = uuid()\n\n  setTimeout(() => sideEffects.emit({action: 'CALL', payload: {fn, args, callId}}), 0)\n\n  return callObservable.filter(fn => fn.callId === callId).map(fn => fn.rslt).take(1)\n}\n\nexport function listen(channel, actionType) {\n\n  return AppDispatcher\n    .filter(action => action.channel === channel && action.actionType === actionType)\n    .map(action => action.payload)\n}\n"]}