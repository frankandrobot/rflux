{"version":3,"sources":["stores/Saga.js"],"names":["put","call","listen","sideEffects","callObservable","filter","action","map","payload","flatMap","callId","result","fn","args","resultObservable","constant","rslt","onValue","undefined","setTimeout","emit","take","channel","actionType"],"mappings":";;;;;;QA0BgBA,G,GAAAA,G;QAOAC,I,GAAAA,I;QASAC,M,GAAAA,M;;AA1ChB;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;AAGO,IAAMC,oCAAc,6BAApB;;AAIP,IAAMC,iBAAiBD,YACpBE,MADoB,CACb;AAAA,SAAUC,OAAOA,MAAP,KAAkB,MAA5B;AAAA,CADa,EAEpBC,GAFoB,CAEhB;AAAA,SAAUD,OAAOE,OAAjB;AAAA,CAFgB,EAGpBC,OAHoB,CAGZ,kBAAU;;AAEjB,MAAMC,SAASJ,OAAOI,MAAtB;AACA,MAAMC,SAASL,OAAOM,EAAP,kCAAaN,OAAOO,IAApB,EAAf;AACA,MAAMC,mBAAmB,4BAAaH,MAAb,IAAuBA,MAAvB,GAAgC,gBAAMI,QAAN,CAAeJ,MAAf,CAAzD;;AAEA,SAAOG,iBAAiBP,GAAjB,CAAqB;AAAA,WAAS,EAACG,cAAD,EAASM,UAAT,EAAT;AAAA,GAArB,CAAP;AACD,CAVoB,EAWpBC,OAXoB,CAWZ;AAAA,SAAMC,SAAN;AAAA,CAXY,CAAvB;;AAaO,SAASlB,GAAT,CAAaM,MAAb,EAAqB;;AAE1Ba,aAAW;AAAA,WAAM,wBAAcC,IAAd,CAAmBd,MAAnB,CAAN;AAAA,GAAX,EAA6C,CAA7C;;AAEA,SAAO,gBAAMS,QAAN,CAAeT,MAAf,CAAP,CAJ0B,CAII;AAC/B;;AAEM,SAASL,IAAT,CAAcW,EAAd,EAA2B;AAAA,oCAANC,IAAM;AAANA,QAAM;AAAA;;AAEhC,MAAMH,SAAS,qBAAf;;AAEAS,aAAW;AAAA,WAAMhB,YAAYiB,IAAZ,CAAiB,EAACd,QAAQ,MAAT,EAAiBE,SAAS,EAACI,MAAD,EAAKC,UAAL,EAAWH,cAAX,EAA1B,EAAjB,CAAN;AAAA,GAAX,EAAkF,CAAlF;;AAEA,SAAON,eAAeC,MAAf,CAAsB;AAAA,WAAMO,GAAGF,MAAH,KAAcA,MAApB;AAAA,GAAtB,EAAkDH,GAAlD,CAAsD;AAAA,WAAMK,GAAGI,IAAT;AAAA,GAAtD,EAAqEK,IAArE,CAA0E,CAA1E,CAAP;AACD;;AAEM,SAASnB,MAAT,CAAgBoB,OAAhB,EAAyBC,UAAzB,EAAqC;;AAE1C,SAAO,wBACJlB,MADI,CACG;AAAA,WAAUC,OAAOgB,OAAP,KAAmBA,OAAnB,IAA8BhB,OAAOiB,UAAP,KAAsBA,UAA9D;AAAA,GADH,EAEJhB,GAFI,CAEA;AAAA,WAAUD,OAAOE,OAAjB;AAAA,GAFA,CAAP;AAGD","file":"Saga.js","sourcesContent":["import Kefir from 'kefir'\n\nimport kefirEmitter from '../utils/kefirEmitter'\nimport isObservable from '../internal/isObservable'\nimport uuid from '../internal/uuid'\n\nimport AppDispatcher from './../appdispatcher/AppDispatcher'\n\n\nexport const sideEffects = kefirEmitter()\n\n\n\nconst callObservable = sideEffects\n  .filter(action => action.action === 'CALL')\n  .map(action => action.payload)\n  .flatMap(action => {\n\n    const callId = action.callId\n    const result = action.fn(...action.args)\n    const resultObservable = isObservable(result) ? result : Kefir.constant(result)\n\n    return resultObservable.map(rslt => ({callId, rslt}))\n  })\n  .onValue(() => undefined)\n\nexport function put(action) {\n\n  setTimeout(() => AppDispatcher.emit(action), 0)\n\n  return Kefir.constant(action) // streamified so we can chain together\n}\n\nexport function call(fn, ...args) {\n\n  const callId = uuid()\n\n  setTimeout(() => sideEffects.emit({action: 'CALL', payload: {fn, args, callId}}), 0)\n\n  return callObservable.filter(fn => fn.callId === callId).map(fn => fn.rslt).take(1)\n}\n\nexport function listen(channel, actionType) {\n\n  return AppDispatcher\n    .filter(action => action.channel === channel && action.actionType === actionType)\n    .map(action => action.payload)\n}\n"]}