{"version":3,"sources":["stores/StateWithSideEffects.js"],"names":[],"mappings":";;;;;;;;;;QA6BgB,2B,GAAA,2B;QA8BA,oB,GAAA,oB;QAWA,oB,GAAA,oB;;;;;;;;IAnEK,oB;AAEnB,gCAAY,KAAZ,EAAmB,WAAnB,EAAgC;AAAA;;AAE9B,SAAK,KAAL,GAAa,SAAS,EAAtB;AACA,SAAK,WAAL,GAAmB,eAAe,EAAlC;AACD;;;;4BAEO,2B,EAA6B;;AAEnC,aAAO,IAAI,oBAAJ,cACD,KAAK,KADJ,EACc,4BAA4B,KAD1C,GAEL,KAAK,WAAL,CAAiB,MAAjB,CAAwB,4BAA4B,WAApD,CAFK,CAAP;AAID;;;;;;;;;;;;;;;;;kBAdkB,oB;AA0Bd,SAAS,2BAAT,CAAqC,CAArC,EAAwC,CAAxC,EAA2C;;AAEhD,MAAM,0BAA0B,aAAa,oBAA7C;AACA,MAAM,0BAA0B,aAAa,oBAA7C;;AAEA,MAAI,2BAA2B,uBAA/B,EAAwD;;AAEtD,WAAO,EAAE,OAAF,CAAU,CAAV,CAAP;AACD,GAHD,MAIK,IAAI,CAAC,uBAAD,IAA4B,CAAC,uBAAjC,EAA0D;;AAE7D,WAAO,IAAI,oBAAJ,cAA6B,CAA7B,EAAmC,CAAnC,EAAP;AACD,GAHI,MAIA,IAAI,2BAA2B,CAAC,uBAAhC,EAAyD;;AAE5D,WAAO,IAAI,oBAAJ,EAA0B,aAAI,EAAE,KAAN,EAAgB,CAAhB,GAAoB,EAAE,WAAhD,EAAP;AACD,GAHI,MAIA,IAAI,CAAC,uBAAD,IAA4B,uBAAhC,EAAyD;;AAE5D,WAAO,IAAI,oBAAJ,cAA6B,CAA7B,EAAmC,EAAE,KAArC,GAA6C,EAAE,WAA/C,CAAP;AACD;AACF;;;;;;;;;AASM,SAAS,oBAAT,CAA8B,KAA9B,EAAqD;AAAA,oCAAb,WAAa;AAAb,eAAa;AAAA;;AAE1D,SAAO,IAAI,oBAAJ,CAAyB,KAAzB,EAAgC,WAAhC,CAAP;AACD;;;;;;;;AAQM,SAAS,oBAAT,GAA8C;AAAA,qCAAb,WAAa;AAAb,eAAa;AAAA;;AAEnD,SAAO,IAAI,oBAAJ,CAAyB,EAAzB,EAA6B,WAA7B,CAAP;AACD","file":"StateWithSideEffects.js","sourcesContent":["/**\n * Hey, look! Something like a monad\n */\nexport default class StateWithSideEffects {\n\n  constructor(state, sideEffects) {\n\n    this.state = state || {}\n    this.sideEffects = sideEffects || []\n  }\n\n  combine(stateOrStateWithSideEffects) {\n\n    return new StateWithSideEffects(\n      {...this.state, ...stateOrStateWithSideEffects.state},\n      this.sideEffects.concat(stateOrStateWithSideEffects.sideEffects)\n    )\n  }\n}\n\n/**\n * In a typed language this method wouldn't exist,\n * but since it's so easy to forget to return the proper class,\n * we add this to help prevent errors.\n *\n * @param {*} a\n * @param {*} b\n * @returns {StateWithSideEffects} instance\n */\nexport function combineStateWithSideEffects(a, b) {\n\n  const aIsStateWithSideEffects = a instanceof StateWithSideEffects\n  const bIsStateWithSideEffects = b instanceof StateWithSideEffects\n\n  if (aIsStateWithSideEffects && bIsStateWithSideEffects) {\n\n    return a.combine(b)\n  }\n  else if (!aIsStateWithSideEffects && !bIsStateWithSideEffects) {\n\n    return new StateWithSideEffects({...a, ...b})\n  }\n  else if (aIsStateWithSideEffects && !bIsStateWithSideEffects) {\n\n    return new StateWithSideEffects(({...a.state, ...b}, a.sideEffects))\n  }\n  else if (!aIsStateWithSideEffects && bIsStateWithSideEffects) {\n\n    return new StateWithSideEffects({...a, ...b.state}, b.sideEffects)\n  }\n}\n\n/**\n * Constructor helper\n *\n * @param {*} state\n * @param {[]} sideEffects - array of side effects\n * @returns {StateWithSideEffects} instance\n */\nexport function stateWithSideEffects(state, ...sideEffects) {\n\n  return new StateWithSideEffects(state, sideEffects)\n}\n\n/**\n * Constructor helper\n *\n * @param {[]} sideEffects - array of side effects\n * @returns {StateWithSideEffects} instance with no state\n */\nexport function statelessSideEffects(...sideEffects) {\n\n  return new StateWithSideEffects({}, sideEffects)\n}\n"]}