{"version":3,"sources":["stores/createSagas.js"],"names":[],"mappings":";;;;;QAKgB,e,GAAA,e;kBA+CQ,W;;AApDxB;;;;AAEA;;;;;;AAGO,SAAS,eAAT,CAAyB,OAAzB,EAAkC,QAAlC,EAA4C,WAA5C,EAAyD;;AAE9D,SAAO;AAAA,WAEL,cACG,MADH,CACU;AAAA,aAAK,EAAE,OAAF,KAAc,OAAd,IAAyB,EAAE,UAAF,KAAiB,QAA/C;AAAA,KADV,EAEG,OAFH,CAEW;AAAA,aAAK,YAAY,EAAE,OAAd,CAAL;AAAA,KAFX,EAGG,GAHH,CAGO,kBAAU;;AAEb,iBAAW;AAAA,eAAM,cAAc,IAAd,CAAmB,EAAC,gBAAD,EAAU,YAAe,QAAf,WAAV,EAA2C,SAAS,MAApD,EAAnB,CAAN;AAAA,OAAX,EAAkG,CAAlG;AACA,aAAO,MAAP;AACD,KAPH,CAFK;AAAA,GAAP;AAUD;;AAED,SAAS,iBAAT,CAA2B,OAA3B,EAAoC,KAApC,EAA2C,YAA3C,EAAyD;;AAEvD,SAAO;AAAA,WAEL,OAAO,IAAP,CAAY,KAAZ,EAAmB,MAAnB,CACE,UAAC,WAAD,EAAc,IAAd,EAAuB;;AAErB,UAAM,UAAU,aAAa,IAAb,CAAhB;AACA,UAAM,aAAa,gBAAgB,OAAhB,EAAyB,IAAzB,EAA+B,OAA/B,EAAwC,aAAxC,CAAnB;;AAEA,aAAO,OAAO,MAAP,CAAc,WAAd,sBAA6B,IAA7B,EAAoC,UAApC,EAAP;AACD,KAPH,EAQE,EARF,CAFK;AAAA,GAAP;AAYD;;AAED,SAAS,0BAAT,CAAoC,KAApC,EAA2C;;AAEzC,SAAO,OAAO,IAAP,CAAY,KAAZ,EAAmB,MAAnB,CACL,UAAC,WAAD,EAAc,IAAd;AAAA,WAAuB,OAAO,MAAP,CAAc,WAAd,sBAAgC,IAAhC,uBAAyD,MAAM,IAAN,CAAzD,EAAvB;AAAA,GADK,EAEL,EAFK,CAAP;AAID;;;;;;;;;;;AAWc,SAAS,WAAT,CAAqB,OAArB,QAA0E;AAAA,MAA3C,KAA2C,QAA3C,KAA2C;AAAA,MAApC,mBAAoC,QAApC,mBAAoC;AAAA,MAAf,YAAe,QAAf,YAAe;;;AAEvF,wBAAO,OAAO,OAAP,KAAmB,QAA1B,EAAoC,6CAApC;AACA,wBAAO,KAAP,EAAc,YAAd;AACA,wBAAO,YAAP,EAAqB,mBAArB;;;AAGA,SAAO,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B,kBAAU;AACnC,QAAI,mBAAJ,EAAyB;AACvB,4BAAO,oBAAoB,MAApB,CAAP,eAA+C,OAA/C,iDAAkG,MAAlG;AACD;AACD,0BAAO,aAAa,MAAb,CAAP,eAAwC,OAAxC,yCAAmF,MAAnF;AACD,GALD;;AAOA,wBAAsB,uBAAuB,EAA7C;;AAEA,SAAO,yBAAiB;;AAEtB,QAAM,cAAc,kBAAkB,OAAlB,EAA2B,KAA3B,EAAkC,YAAlC,EAAgD,aAAhD,CAApB;;AAEA,WAAO;AACL,YAAM,OADD;AAEL,8BAFK;AAGL,uBAAiB,sCAAoB,KAApB,EAA2B,mBAA3B,EAAgD,aAAhD,CAHZ;AAIL,yBAAmB,2BAA2B,WAA3B;AAJd,KAAP;AAMD,GAVD;AAWD","file":"createSagas.js","sourcesContent":["import assert from '../internal/assert'\n\nimport {bindActionFunctions} from './createStore'\n\n\nexport function bindSagaHandler(channel, sagaName, sagaHandler) {\n\n  return AppDispatcher =>\n\n    AppDispatcher\n      .filter(x => x.channel === channel && x.actionType === sagaName)\n      .flatMap(x => sagaHandler(x.payload))\n      .map(result => {\n        // emit the result back to the app dispatcher for time travel.\n        setTimeout(() => AppDispatcher.emit({channel, actionType: `${sagaName}Result`, payload: result}), 0)\n        return result\n      })\n}\n\nfunction _bindSagaHandlers(channel, Sagas, SagaHandlers) {\n\n  return AppDispatcher =>\n\n    Object.keys(Sagas).reduce(\n      (observables, saga) => {\n\n        const handler = SagaHandlers[saga]\n        const observable = bindSagaHandler(channel, saga, handler)(AppDispatcher)\n\n        return Object.assign(observables, {[saga]: observable})\n      },\n      {}\n    )\n}\n\nfunction _bindSagaResultObservables(sagas) {\n\n  return Object.keys(sagas).reduce(\n    (observables, saga) => Object.assign(observables, {[`${saga}ResultObservable`]: sagas[saga]}),\n    {}\n  )\n}\n\n/**\n  * SideEffectActionFunctions are optional but if you pass these,\n  * then every SideEffect must have a corresponding action function.\n  *\n  * @param channel\n  * @param Sagas - map whose keys are the names of the side effects\n  * @param SagaActionFunctions - (optional) map of action functions\n  * @param SagaHandlers - map of handler functions\n  */\nexport default function createSagas(channel, {Sagas, SagaActionFunctions, SagaHandlers}) {\n\n  assert(typeof channel === 'string', 'Needs a channel and it needs to be a string')\n  assert(Sagas, 'Need Sagas')\n  assert(SagaHandlers, 'Need SagaHandlers')\n\n  //every side effect must map to an action function and handler\n  Object.keys(Sagas).forEach(action => {\n    if (SagaActionFunctions) {\n      assert(SagaActionFunctions[action], `Channel ${channel} is missing side effect action function \"${action}\"`)\n    }\n    assert(SagaHandlers[action], `Channel ${channel} is missing side effect handler \"${action}\"`)\n  })\n\n  SagaActionFunctions = SagaActionFunctions || {}\n\n  return AppDispatcher => {\n\n    const observables = _bindSagaHandlers(channel, Sagas, SagaHandlers)(AppDispatcher)\n\n    return {\n      name: channel,\n      observables,\n      actionFunctions: bindActionFunctions(Sagas, SagaActionFunctions)(AppDispatcher),\n      resultObservables: _bindSagaResultObservables(observables)\n    }\n  }\n}\n"]}