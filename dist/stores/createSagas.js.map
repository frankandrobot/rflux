{"version":3,"sources":["stores/createSagas.js"],"names":["bindSagaHandler","createSagas","channel","sagaName","sagaHandler","AppDispatcher","filter","x","actionType","flatMap","payload","map","setTimeout","emit","result","_bindSagaHandlers","Sagas","SagaHandlers","Object","keys","reduce","observables","saga","handler","observable","assign","_bindSagaResultObservables","sagas","SagaActionFunctions","forEach","action","name","actionFunctions","resultObservables"],"mappings":";;;;;QAKgBA,e,GAAAA,e;kBA+CQC,W;;AApDxB;;;;AAEA;;;;;;AAGO,SAASD,eAAT,CAAyBE,OAAzB,EAAkCC,QAAlC,EAA4CC,WAA5C,EAAyD;;AAE9D,SAAO;AAAA,WAELC,cACGC,MADH,CACU;AAAA,aAAKC,EAAEL,OAAF,KAAcA,OAAd,IAAyBK,EAAEC,UAAF,KAAiBL,QAA/C;AAAA,KADV,EAEGM,OAFH,CAEW;AAAA,aAAKL,YAAYG,EAAEG,OAAd,CAAL;AAAA,KAFX,EAGGC,GAHH,CAGO,kBAAU;AACb;AACAC,iBAAW;AAAA,eAAMP,cAAcQ,IAAd,CAAmB,EAACX,gBAAD,EAAUM,YAAeL,QAAf,WAAV,EAA2CO,SAASI,MAApD,EAAnB,CAAN;AAAA,OAAX,EAAkG,CAAlG;AACA,aAAOA,MAAP;AACD,KAPH,CAFK;AAAA,GAAP;AAUD;;AAED,SAASC,iBAAT,CAA2Bb,OAA3B,EAAoCc,KAApC,EAA2CC,YAA3C,EAAyD;;AAEvD,SAAO;AAAA,WAELC,OAAOC,IAAP,CAAYH,KAAZ,EAAmBI,MAAnB,CACE,UAACC,WAAD,EAAcC,IAAd,EAAuB;;AAErB,UAAMC,UAAUN,aAAaK,IAAb,CAAhB;AACA,UAAME,aAAaxB,gBAAgBE,OAAhB,EAAyBoB,IAAzB,EAA+BC,OAA/B,EAAwClB,aAAxC,CAAnB;;AAEA,aAAOa,OAAOO,MAAP,CAAcJ,WAAd,sBAA6BC,IAA7B,EAAoCE,UAApC,EAAP;AACD,KAPH,EAQE,EARF,CAFK;AAAA,GAAP;AAYD;;AAED,SAASE,0BAAT,CAAoCC,KAApC,EAA2C;;AAEzC,SAAOT,OAAOC,IAAP,CAAYQ,KAAZ,EAAmBP,MAAnB,CACL,UAACC,WAAD,EAAcC,IAAd;AAAA,WAAuBJ,OAAOO,MAAP,CAAcJ,WAAd,sBAAgCC,IAAhC,uBAAyDK,MAAML,IAAN,CAAzD,EAAvB;AAAA,GADK,EAEL,EAFK,CAAP;AAID;;AAED;;;;;;;;;AASe,SAASrB,WAAT,CAAqBC,OAArB,QAA0E;AAAA,MAA3Cc,KAA2C,QAA3CA,KAA2C;AAAA,MAApCY,mBAAoC,QAApCA,mBAAoC;AAAA,MAAfX,YAAe,QAAfA,YAAe;;;AAEvF,wBAAO,OAAOf,OAAP,KAAmB,QAA1B,EAAoC,6CAApC;AACA,wBAAOc,KAAP,EAAc,YAAd;AACA,wBAAOC,YAAP,EAAqB,mBAArB;;AAEA;AACAC,SAAOC,IAAP,CAAYH,KAAZ,EAAmBa,OAAnB,CAA2B,kBAAU;AACnC,QAAID,mBAAJ,EAAyB;AACvB,4BAAOA,oBAAoBE,MAApB,CAAP,eAA+C5B,OAA/C,iDAAkG4B,MAAlG;AACD;AACD,0BAAOb,aAAaa,MAAb,CAAP,eAAwC5B,OAAxC,yCAAmF4B,MAAnF;AACD,GALD;;AAOAF,wBAAsBA,uBAAuB,EAA7C;;AAEA,SAAO,yBAAiB;;AAEtB,QAAMP,cAAcN,kBAAkBb,OAAlB,EAA2Bc,KAA3B,EAAkCC,YAAlC,EAAgDZ,aAAhD,CAApB;;AAEA,WAAO;AACL0B,YAAM7B,OADD;AAELmB,8BAFK;AAGLW,uBAAiB,sCAAoBhB,KAApB,EAA2BY,mBAA3B,EAAgDvB,aAAhD,CAHZ;AAIL4B,yBAAmBP,2BAA2BL,WAA3B;AAJd,KAAP;AAMD,GAVD;AAWD","file":"createSagas.js","sourcesContent":["import assert from '../internal/assert'\n\nimport {bindActionFunctions} from './createStore'\n\n\nexport function bindSagaHandler(channel, sagaName, sagaHandler) {\n\n  return AppDispatcher =>\n\n    AppDispatcher\n      .filter(x => x.channel === channel && x.actionType === sagaName)\n      .flatMap(x => sagaHandler(x.payload))\n      .map(result => {\n        // emit the result back to the app dispatcher for time travel.\n        setTimeout(() => AppDispatcher.emit({channel, actionType: `${sagaName}Result`, payload: result}), 0)\n        return result\n      })\n}\n\nfunction _bindSagaHandlers(channel, Sagas, SagaHandlers) {\n\n  return AppDispatcher =>\n\n    Object.keys(Sagas).reduce(\n      (observables, saga) => {\n\n        const handler = SagaHandlers[saga]\n        const observable = bindSagaHandler(channel, saga, handler)(AppDispatcher)\n\n        return Object.assign(observables, {[saga]: observable})\n      },\n      {}\n    )\n}\n\nfunction _bindSagaResultObservables(sagas) {\n\n  return Object.keys(sagas).reduce(\n    (observables, saga) => Object.assign(observables, {[`${saga}ResultObservable`]: sagas[saga]}),\n    {}\n  )\n}\n\n/**\n  * SideEffectActionFunctions are optional but if you pass these,\n  * then every SideEffect must have a corresponding action function.\n  *\n  * @param channel\n  * @param Sagas - map whose keys are the names of the side effects\n  * @param SagaActionFunctions - (optional) map of action functions\n  * @param SagaHandlers - map of handler functions\n  */\nexport default function createSagas(channel, {Sagas, SagaActionFunctions, SagaHandlers}) {\n\n  assert(typeof channel === 'string', 'Needs a channel and it needs to be a string')\n  assert(Sagas, 'Need Sagas')\n  assert(SagaHandlers, 'Need SagaHandlers')\n\n  //every side effect must map to an action function and handler\n  Object.keys(Sagas).forEach(action => {\n    if (SagaActionFunctions) {\n      assert(SagaActionFunctions[action], `Channel ${channel} is missing side effect action function \"${action}\"`)\n    }\n    assert(SagaHandlers[action], `Channel ${channel} is missing side effect handler \"${action}\"`)\n  })\n\n  SagaActionFunctions = SagaActionFunctions || {}\n\n  return AppDispatcher => {\n\n    const observables = _bindSagaHandlers(channel, Sagas, SagaHandlers)(AppDispatcher)\n\n    return {\n      name: channel,\n      observables,\n      actionFunctions: bindActionFunctions(Sagas, SagaActionFunctions)(AppDispatcher),\n      resultObservables: _bindSagaResultObservables(observables)\n    }\n  }\n}\n"]}