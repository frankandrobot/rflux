{"version":3,"sources":["internal/ContainerHelpers.js"],"names":[],"mappings":";;;;;QAmBgB,oB,GAAA,oB;QAeA,qB,GAAA,qB;QAKA,e,GAAA,e;QAOA,kB,GAAA,kB;;AA9ChB;;;;;;;;;;;;;;;AASA,SAAS,SAAT,CAAmB,SAAnB,EAA8B,IAA9B,EAAoC;;AAElC,SAAO;AAAA,WAAO,UAAU,QAAV,qBAAqB,KAAK,IAA1B,EAAiC,GAAjC,EAAP;AAAA,GAAP;AACD;;AAED,SAAS,UAAT,CAAoB,mBAApB,EAAyC,SAAzC,EAAoD;;AAElD,sBAAoB,OAApB,CAA4B,UAAC,GAAD,EAAM,CAAN;AAAA,WAAY,IAAI,UAAJ,CAAe,OAAf,CAAuB,UAAU,CAAV,CAAvB,CAAZ;AAAA,GAA5B;AACD;;AAEM,SAAS,oBAAT,CAA8B,SAA9B,EAAyC,mBAAzC,EAA8D,YAA9D,EAA4E;;AAEjF,iBAAe,gBAAgB,UAAU,KAA1B,IAAmC,EAAlD;;AAEA,MAAM,YAAY,oBAAoB,GAApB,CAAwB;AAAA,WAAQ,UAAU,SAAV,EAAqB,IAArB,CAAR;AAAA,GAAxB,CAAlB;;;AAGA,YAAU,QAAV,CACE,YADF,EAEE;AAAA,WAAM,WAAW,mBAAX,EAAgC,SAAhC,CAAN;AAAA,GAFF;;AAKA,SAAO,SAAP;AACD;;AAEM,SAAS,qBAAT,CAA+B,mBAA/B,EAAoD,SAApD,EAA+D;;AAEpE,sBAAoB,OAApB,CAA4B,UAAC,GAAD,EAAM,CAAN;AAAA,WAAY,IAAI,UAAJ,CAAe,QAAf,CAAwB,UAAU,CAAV,CAAxB,CAAZ;AAAA,GAA5B;AACD;;AAEM,SAAS,eAAT,CAAyB,KAAzB,EAAgC;;AAErC,SAAO,OAAO,IAAP,CAAY,KAAZ,EACF,MADE,CACK;AAAA,WAAQ,4BAAa,MAAM,IAAN,CAAb,CAAR;AAAA,GADL,EAEF,GAFE,CAEE;AAAA,WAAS,EAAC,MAAM,IAAP,EAAa,YAAY,MAAM,IAAN,CAAzB,EAAT;AAAA,GAFF,KAEsD,EAF7D;AAGD;;AAEM,SAAS,kBAAT,CAA4B,KAA5B,EAAmC;;AAExC,SAAO,OAAO,IAAP,CAAY,KAAZ,EACJ,MADI,CACG;AAAA,WAAQ,CAAC,4BAAa,MAAM,IAAN,CAAb,CAAD,IAA8B,SAAS,UAA/C;AAAA,GADH,EAEJ,MAFI,CAEG,UAAC,KAAD,EAAQ,IAAR;AAAA,WAAiB,OAAO,MAAP,CAAc,KAAd,sBAAuB,IAAvB,EAA8B,MAAM,IAAN,CAA9B,EAAjB;AAAA,GAFH,EAEiE,EAFjE,CAAP;AAGD","file":"ContainerHelpers.js","sourcesContent":["import isObservable from '../internal/isObservable'\n\n/**\n * a callback maps a \"val\" to the obj property on the Component state\n *\n * @param component\n * @param prop\n * @private\n */\nfunction _callback(component, prop) {\n\n  return val => component.setState({[prop.name]: val})\n}\n\nfunction _subscribe(observableStateList, callbacks) {\n\n  observableStateList.forEach((obj, i) => obj.observable.onValue(callbacks[i]))\n}\n\nexport function setupObservableState(component, observableStateList, initialState) {\n\n  initialState = initialState || component.state || {}\n\n  const callbacks = observableStateList.map(prop => _callback(component, prop))\n\n  //set default state first before setting up listeners\n  component.setState(\n    initialState,\n    () => _subscribe(observableStateList, callbacks)\n  )\n\n  return callbacks\n}\n\nexport function removeObservableState(observableStateList, callbacks) {\n\n  observableStateList.forEach((obj, i) => obj.observable.offValue(callbacks[i]))\n}\n\nexport function observableState(state) {\n\n  return Object.keys(state)\n      .filter(prop => isObservable(state[prop]))\n      .map(prop => ({name: prop, observable: state[prop]})) || []\n}\n\nexport function nonObservableState(state) {\n\n  return Object.keys(state)\n    .filter(prop => !isObservable(state[prop]) && prop !== 'children')\n    .reduce((total, prop) => Object.assign(total, {[prop]: state[prop]}), {})\n}\n"]}