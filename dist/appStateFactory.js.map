{"version":3,"sources":["appStateFactory.js"],"names":["appStateFactory","_create","stores","sagas","middleware","InitialAppDispatcher","dispatch","emit","Middleware","rawMiddleware","AppDispatcher","spyOnAppDispatcher","create","rawStores","rawSagas","length","Error","_createStores","_createSagas","appStateObservable","_createAppStateObservable","_setupStoreObs","_setupSagaObs","onValue","setState","_storesToState","_sagasToState","map","s","storeStatesWithSideEffectsObservables","x","stateWithSideEffectsObservable","combine","observables","reduce","state","i","Object","assign","name","store","saga","actionFunctions","resultObservables","forEach","sideEffects","setTimeout","sideEffect","keys","_sagas","obs","undefined"],"mappings":"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","file":"appStateFactory.js","sourcesContent":["import Kefir from 'kefir'\n\nimport createAppDispatcher from './appdispatcher/createAppDispatcher'\nimport createStore from './stores/createStore'\nimport createSagas from './stores/createSagas'\nimport sagaFactory from './stores/sagaFactory'\nimport middlewareFactory from './redux/middlewareFactory'\n\n\n/**\n * A store consists of:\n * - a name (channel)\n * - map of ActionTypes\n * - map of Reducers indexed by ActionType\n * - map of ActionFunctions indexed by ActionType\n *\n * A middleware is function with the following signature:\n * store => next => action\n *\n * @param {Stores[]} stores\n * @param {Sagas[]} sagas\n * @param {Middleware[]} middleware\n */\nexport default function appStateFactory(\n  {\n    stores = [],\n    sagas = [],\n    middleware = []\n  }) {\n\n  const InitialAppDispatcher = createAppDispatcher()\n  const dispatch = (...args) => InitialAppDispatcher.emit(...args)\n  const Middleware = middlewareFactory({dispatch, rawMiddleware: middleware})\n  const AppDispatcher = Middleware.spyOnAppDispatcher({AppDispatcher: InitialAppDispatcher})\n\n  /* eslint-disable no-use-before-define */\n  return {\n    sagas: sagaFactory(AppDispatcher),\n    create: _create({Middleware, rawStores: stores, rawSagas: sagas, AppDispatcher})\n  }\n}\n\nexport function _create({Middleware, rawStores = [], rawSagas = [], AppDispatcher}) {\n  return function create() {\n\n    if (rawStores.length === 0) {\n      throw new Error('You didn\\'t add any stores!')\n    }\n\n    const stores = _createStores({rawStores, AppDispatcher})\n    const sagas = _createSagas({rawSagas, AppDispatcher})\n    const appStateObservable = _createAppStateObservable({stores})\n\n    _setupStoreObs({stores, AppDispatcher})\n    _setupSagaObs({sagas})\n\n    // inject the state back into Middleware, so that getState works\n    appStateObservable.onValue(Middleware.setState)\n\n    return {\n      appStateObservable,\n      ..._storesToState({stores}),\n      ..._sagasToState({sagas})\n    }\n  }\n}\n\nfunction _createStores({rawStores, AppDispatcher}) {\n  return rawStores.map(s => createStore(s)(AppDispatcher))\n}\n\nfunction _createSagas({rawSagas, AppDispatcher}) {\n  return rawSagas.map(s => createSagas(s)(AppDispatcher))\n}\n\nfunction _createAppStateObservable({stores}) {\n  // first create the new appStateObservable\n  const storeStatesWithSideEffectsObservables = stores.map(x => x.stateWithSideEffectsObservable)\n\n  // then combine these into the appStateObservable\n  return Kefir.combine(\n    // this fires when any of the store state observables change\n    storeStatesWithSideEffectsObservables,\n    // this combines all the store states into a single state\n    (...observables) => observables.reduce(\n      (appStateObservable, state, i) => Object.assign(\n        appStateObservable,\n        {[`${stores[i].name}`]: state.state}\n      ),\n      {}\n    )\n  )\n}\n\nfunction _storesToState({stores}) {\n  return stores.reduce((state, store) => ({...state, ...store.store}), {})\n}\n\nfunction _sagasToState({sagas}) {\n  // add action functions and result observables to app state\n  return sagas.reduce((state, saga) => ({...state, ...saga.actionFunctions, ...saga.resultObservables}), {})\n}\n\nfunction _setupStoreObs({stores, AppDispatcher}) {\n  // setup one-way data flow + side effects\n  stores.forEach(store => store.stateWithSideEffectsObservable.onValue(state =>\n    (state.sideEffects || []).forEach(\n      sideEffect => setTimeout(() => AppDispatcher.emit(sideEffect), 0)\n    )\n  ))\n}\n\nfunction _setupSagaObs({sagas}) {\n  // setup one-way data flow\n  sagas.forEach(_sagas =>\n    Object.keys(_sagas.observables).forEach(obs => _sagas.observables[obs].onValue(() => undefined))\n  )\n}\n\n\n\n"]}