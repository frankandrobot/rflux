{"version":3,"sources":["appStateFactory.js"],"names":["appStateFactory","channels","rawChannels","sagas","rawSagas","redux","middleware","reducers","Middleware","AppDispatcher","rawMiddleware","appDispatcher","reduxStore","Reducers","appStateObservable","_createAppStateObservable","map","setState","state","sagaInterface","_setupChannelObs","_setupSagaObs","AppState","actions","_channelActions","_sagaActions","observables","_channelObservables","_sagaObservables","_channelsToState","channelStatesWithSideEffectsObservables","x","stateWithSideEffectsObservable","combine","reduce","i","Object","assign","name","channel","saga","actionFunctions","observable","resultObservables","forEach","onValue","sideEffects","setTimeout","emit","sideEffect","keys","_sagas","obs","undefined"],"mappings":"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","file":"appStateFactory.js","sourcesContent":["import Kefir from 'kefir'\n\nimport checkUnique from './internal/checkUnique'\nimport createAppDispatcher from './appdispatcher/createAppDispatcher'\nimport createChannels from './channels/createChannels'\nimport createSagas from './channels/createSagas'\nimport sagaInterfaceFactory from './channels/sagaInterfaceFactory'\nimport reduxMiddlewareFactory from './redux/reduxMiddlewareFactory'\nimport createReduxReducers from './redux/createReduxReducers'\n\n\n/**\n * A channel consists of:\n * - a name (channel)\n * - map of ActionTypes\n * - map of Reducers indexed by ActionType\n * - map of ActionFunctions indexed by ActionType\n *\n * See `createChannels` for more details.\n *\n * A saga consists of:\n * - a name (channel)\n * - map of ActionTypes\n * - SagaHandlersFn higher order function that accepts a `sagas` interface and\n *   returns the SagaHandlers.\n *\n * See `createSagas` for more details.\n *\n * A middleware is function with the following signature:\n * store => next => action\n *\n * @param {Object} opts\n * @param {Channels[]} opts.channels\n * @param {Sagas[]} opts.sagas\n * @param {Middleware[]} opts.middleware\n * @returns {{AppState, AppDispatcher}} the AppState and its dispatcher to send messages.\n */\nexport default function appStateFactory(\n  {\n    channels: rawChannels = [],\n    sagas: rawSagas = [],\n    redux: {middleware = [], reducers = {}} = {redux: {middleware: [], reducers: {}}}\n  }) {\n\n  /* eslint-disable no-use-before-define */\n  // setup redux\n  const Middleware = reduxMiddlewareFactory({\n    AppDispatcher: createAppDispatcher(),\n    rawMiddleware: middleware\n  })\n  const AppDispatcher = Middleware.appDispatcher()\n\n  // setup public interface\n  const reduxStore = createReduxReducers({Reducers: reducers, AppDispatcher})\n  const channels = createChannels({rawChannels, AppDispatcher})\n  const appStateObservable =\n    _createAppStateObservable({channels: [...channels, ...reduxStore]})\n    // inject the state back into Middleware, so that getState works. Unfortunately,\n    // in kefirjs, there is no way to do a side effect w/o activating the stream. So\n    // we use `map` for side effects (which is technically an antipattern).\n      .map(state => {\n        Middleware.setState(state)\n        return state\n      })\n  const sagaInterface = sagaInterfaceFactory({AppDispatcher, appStateObservable})\n  const sagas = createSagas({rawSagas, AppDispatcher, sagaInterface})\n\n  checkUnique(\n    [...rawChannels, ...rawSagas, ...reducers],\n    'channel',\n    'Cannot have a channel, saga, or redux reducer with the same name'\n  )\n\n  _setupChannelObs({channels: [...channels, ...reduxStore], AppDispatcher})\n  _setupSagaObs({sagas})\n\n  const AppState = {\n    appStateObservable,\n    // the pre-bound actions\n    actions: {\n      ..._channelActions([...channels, ...reduxStore]),\n      ..._sagaActions(sagas)\n    },\n    observables: {\n      ..._channelObservables([...channels, ...reduxStore]),\n      ..._sagaObservables(sagas)\n    },\n    // @deprecated\n    ..._channelsToState({channels: [...channels, ...reduxStore]}),\n  }\n  /* eslint-enable */\n\n  return {\n    AppState,\n    AppDispatcher\n  }\n}\n\nfunction _createAppStateObservable({channels}) {\n  // first create the new appStateObservable\n  const channelStatesWithSideEffectsObservables =\n    channels.map(x => x.stateWithSideEffectsObservable)\n\n  // then combine these into the appStateObservable\n  return Kefir.combine(\n    // this fires when any of the channel state observables change\n    channelStatesWithSideEffectsObservables,\n    // this combines all the channel states into a single state\n    (...observables) => observables.reduce(\n      (appStateObservable, state, i) => Object.assign(\n        appStateObservable,\n        {[`${channels[i].name}`]: state.state}\n      ),\n      {}\n    )\n  )\n}\n\nfunction _channelActions(channels) {\n  return channels.reduce((state, channel) => ({...state, ...channel.actions}), {})\n}\n\nfunction _sagaActions(sagas) {\n  return sagas.reduce((state, saga) => ({...state, ...saga.actionFunctions}), {})\n}\n\nfunction _channelObservables(channels) {\n  return channels.reduce((state, channel) => ({...state, ...channel.observable}), {})\n}\n\nfunction _sagaObservables(sagas) {\n  return sagas.reduce((state, saga) => ({...state, ...saga.resultObservables}), {})\n}\n\n/**\n * @deprecated\n * @param channels\n * @returns {*}\n * @private\n */\nfunction _channelsToState({channels}) {\n  return channels.reduce((state, channel) => ({...state, ...channel.channel}), {})\n}\n\nfunction _setupChannelObs({channels, AppDispatcher}) {\n  // setup one-way data flow + side effects\n  channels.forEach(channel => channel.stateWithSideEffectsObservable.onValue(state =>\n    (state.sideEffects || []).forEach(\n      sideEffect => setTimeout(() => AppDispatcher.emit(sideEffect), 0)\n    )\n  ))\n}\n\nfunction _setupSagaObs({sagas}) {\n  // setup one-way data flow\n  sagas.forEach(_sagas =>\n    Object.keys(_sagas.observables).forEach(obs => _sagas.observables[obs].onValue(() => undefined))\n  )\n}\n\n\n\n"]}