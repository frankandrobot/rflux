{"version":3,"sources":["appStateFactory.js"],"names":["appStateFactory","stores","rawStores","sagas","rawSagas","redux","middleware","reducers","Middleware","AppDispatcher","rawMiddleware","appDispatcher","reduxStore","Reducers","appStateObservable","_createAppStateObservable","map","setState","state","sagaInterface","_setupStoreObs","_setupSagaObs","AppState","_storesToState","_sagasToState","storeStatesWithSideEffectsObservables","x","stateWithSideEffectsObservable","combine","observables","reduce","i","Object","assign","name","store","saga","actionFunctions","resultObservables","forEach","onValue","sideEffects","setTimeout","emit","sideEffect","keys","_sagas","obs","undefined"],"mappings":"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","file":"appStateFactory.js","sourcesContent":["import Kefir from 'kefir'\n\nimport checkUnique from './internal/checkUnique'\nimport createAppDispatcher from './appdispatcher/createAppDispatcher'\nimport createStores from './stores/createStores'\nimport createSagas from './stores/createSagas'\nimport sagaInterfaceFactory from './stores/sagaInterfaceFactory'\nimport reduxMiddlewareFactory from './redux/reduxMiddlewareFactory'\nimport createReduxReducers from './redux/createReduxReducers'\n\n\n/**\n * A store consists of:\n * - a name (channel)\n * - map of ActionTypes\n * - map of Reducers indexed by ActionType\n * - map of ActionFunctions indexed by ActionType\n *\n * See `createStore` for more details.\n *\n * A saga consists of:\n * - a name (channel)\n * - map of ActionTypes\n * - SagaHandlersFn higher order function that accepts a `sagas` interface and\n *   returns the SagaHandlers.\n *\n * See `createSagas` for more details.\n *\n * A middleware is function with the following signature:\n * store => next => action\n *\n * @param {Stores[]} stores\n * @param {Sagas[]} sagas\n * @param {Middleware[]} middleware\n * @returns {{AppState, AppDispatcher}} the AppState and its dispatcher to send messages.\n */\nexport default function appStateFactory(\n  {\n    stores: rawStores = [],\n    sagas: rawSagas = [],\n    redux: {middleware = [], reducers = {}} = {redux: {middleware: [], reducers: {}}}\n  }) {\n\n  /* eslint-disable no-use-before-define */\n  // setup redux\n  const Middleware = reduxMiddlewareFactory({\n    AppDispatcher: createAppDispatcher(),\n    rawMiddleware: middleware\n  })\n  const AppDispatcher = Middleware.appDispatcher()\n\n  // setup public interface\n  const reduxStore = createReduxReducers({Reducers: reducers, AppDispatcher})\n  const stores = createStores({rawStores, AppDispatcher})\n  const appStateObservable =\n    _createAppStateObservable({stores: [...stores, ...reduxStore]})\n    // inject the state back into Middleware, so that getState works. Unfortunately,\n    // in kefirjs, there is no way to do a side effect w/o activating the stream. So\n    // we use `map` for side effects (which is technically an antipattern).\n      .map(state => {\n        Middleware.setState(state)\n        return state\n      })\n  const sagaInterface = sagaInterfaceFactory({AppDispatcher, appStateObservable})\n  const sagas = createSagas({rawSagas, AppDispatcher, sagaInterface})\n\n  checkUnique(\n    [...rawStores, ...rawSagas, ...reducers],\n    'channel',\n    'Cannot have a store, saga, or redux reducer with the same name'\n  )\n\n  _setupStoreObs({stores: [...stores, ...reduxStore], AppDispatcher})\n  _setupSagaObs({sagas})\n\n  const AppState = {\n    appStateObservable,\n    ..._storesToState({stores: [...stores, ...reduxStore]}),\n    ..._sagasToState({sagas})\n  }\n  /* eslint-enable */\n\n  return {\n    AppState,\n    AppDispatcher\n  }\n}\n\nfunction _createAppStateObservable({stores}) {\n  // first create the new appStateObservable\n  const storeStatesWithSideEffectsObservables =\n    stores.map(x => x.stateWithSideEffectsObservable)\n\n  // then combine these into the appStateObservable\n  return Kefir.combine(\n    // this fires when any of the store state observables change\n    storeStatesWithSideEffectsObservables,\n    // this combines all the store states into a single state\n    (...observables) => observables.reduce(\n      (appStateObservable, state, i) => Object.assign(\n        appStateObservable,\n        {[`${stores[i].name}`]: state.state}\n      ),\n      {}\n    )\n  )\n}\n\nfunction _storesToState({stores}) {\n  return stores.reduce((state, store) => ({...state, ...store.store}), {})\n}\n\nfunction _sagasToState({sagas}) {\n  // add action functions and result observables to app state\n  return sagas.reduce((state, saga) => ({...state, ...saga.actionFunctions, ...saga.resultObservables}), {})\n}\n\nfunction _setupStoreObs({stores, AppDispatcher}) {\n  // setup one-way data flow + side effects\n  stores.forEach(store => store.stateWithSideEffectsObservable.onValue(state =>\n    (state.sideEffects || []).forEach(\n      sideEffect => setTimeout(() => AppDispatcher.emit(sideEffect), 0)\n    )\n  ))\n}\n\nfunction _setupSagaObs({sagas}) {\n  // setup one-way data flow\n  sagas.forEach(_sagas =>\n    Object.keys(_sagas.observables).forEach(obs => _sagas.observables[obs].onValue(() => undefined))\n  )\n}\n\n\n\n"]}