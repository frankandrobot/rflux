{"version":3,"sources":["appStateFactory.js"],"names":["appStateFactory","_create","middleware","stores","sagas","AppDispatcher","create","rawStores","rawSagas","length","Error","_createStores","_createSagas","appStateObservable","_createAppStateObservable","_setupStoreObs","_setupSagaObs","_storesToState","_sagasToState","map","s","storeStatesWithSideEffectsObservables","x","stateWithSideEffectsObservable","combine","observables","reduce","state","i","Object","assign","name","store","saga","actionFunctions","resultObservables","forEach","onValue","sideEffects","setTimeout","emit","sideEffect","keys","_sagas","obs","undefined"],"mappings":"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","file":"appStateFactory.js","sourcesContent":["import Kefir from 'kefir'\n\nimport createAppDispatcher from './appdispatcher/createAppDispatcher'\nimport createStore from './stores/createStore'\nimport createSagas from './stores/createSagas'\nimport sagaFactory from './stores/sagaFactory'\n\n\n/**\n * A store consists of:\n * - a name (channel)\n * - map of ActionTypes\n * - map of Reducers indexed by ActionType\n * - map of ActionFunctions indexed by ActionType\n *\n * @param {Middleware[]} middleware\n * @param {Stores[]} stores\n * @param {Sagas[]} sagas\n */\nexport default function appStateFactory(\n  {\n    middleware = [],\n    stores = [],\n    sagas = []\n  }) {\n\n  const AppDispatcher = createAppDispatcher()\n\n  /* eslint-disable no-use-before-define */\n  return {\n    sagas: sagaFactory(AppDispatcher),\n    create: _create({middleware, rawStores: stores, rawSagas: sagas, AppDispatcher})\n  }\n}\n\nexport function _create({rawStores = [], rawSagas = [], AppDispatcher}) {\n  return function create() {\n\n    if (rawStores.length === 0) {\n      throw new Error('You didn\\'t add any stores!')\n    }\n\n    const stores = _createStores({rawStores, AppDispatcher})\n    const sagas = _createSagas({rawSagas, AppDispatcher})\n    const appStateObservable = _createAppStateObservable({stores})\n\n    _setupStoreObs({stores, AppDispatcher})\n    _setupSagaObs({sagas})\n\n    return {\n      appStateObservable,\n      ..._storesToState({stores}),\n      ..._sagasToState({sagas})\n    }\n  }\n}\n\nfunction _createStores({rawStores, AppDispatcher}) {\n  return rawStores.map(s => createStore(s)(AppDispatcher))\n}\n\nfunction _createSagas({rawSagas, AppDispatcher}) {\n  return rawSagas.map(s => createSagas(s)(AppDispatcher))\n}\n\nfunction _createAppStateObservable({stores}) {\n  // first create the new appStateObservable\n  const storeStatesWithSideEffectsObservables = stores.map(x => x.stateWithSideEffectsObservable)\n\n  // then combine these into the appStateObservable\n  return Kefir.combine(\n    // this fires when any of the store state observables change\n    storeStatesWithSideEffectsObservables,\n    // this combines all the store states into a single state\n    (...observables) => observables.reduce(\n      (appStateObservable, state, i) => Object.assign(\n        appStateObservable,\n        {[`${stores[i].name}`]: state.state}\n      ),\n      {}\n    )\n  )\n}\n\nfunction _storesToState({stores}) {\n  return stores.reduce((state, store) => ({...state, ...store.store}), {})\n}\n\nfunction _sagasToState({sagas}) {\n  // add action functions and result observables to app state\n  return sagas.reduce((state, saga) => ({...state, ...saga.actionFunctions, ...saga.resultObservables}), {})\n}\n\nfunction _setupStoreObs({stores, AppDispatcher}) {\n  // setup one-way data flow + side effects\n  stores.forEach(store => store.stateWithSideEffectsObservable.onValue(state =>\n    (state.sideEffects || []).forEach(\n      sideEffect => setTimeout(() => AppDispatcher.emit(sideEffect), 0)\n    )\n  ))\n}\n\nfunction _setupSagaObs({sagas}) {\n  // setup one-way data flow\n  sagas.forEach(_sagas =>\n    Object.keys(_sagas.observables).forEach(obs => _sagas.observables[obs].onValue(() => undefined))\n  )\n}\n\n\n\n"]}