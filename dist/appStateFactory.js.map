{"version":3,"sources":["appStateFactory.js"],"names":["appStateFactory","registerSagas","create","AppState","_storeInfo","_sagaInfo","middleware","stores","sagaInfo","AppDispatcher","registerStore","sagas","_registerStore","channel","ActionTypes","Reducers","ActionFunctions","ActionObservables","store","push","stateWithSideEffectsObservables","map","x","stateWithSideEffectsObservable","appStateObservable","combine","observables","reduce","state","i","Object","assign","name","Sagas","SagaActionFunctions","SagaHandlers","actionFunctions","resultObservables","callback","undefined","keys","forEach","obs","onValue","__create","length","Error","sideEffects","setTimeout","emit","sideEffect"],"mappings":"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","file":"appStateFactory.js","sourcesContent":["import Kefir from 'kefir'\n\nimport createAppDispatcher from './appdispatcher/createAppDispatcher'\nimport createStore from './stores/createStore'\nimport createSagas from './stores/createSagas'\n\n\nconst AppState = {}\n\nexport const _storeInfo = []\nexport const _sagaInfo = []\n\nexport default function appStateFactory(middleware = []) {\n  const AppState = {}\n  const stores = []\n  const sagaInfo = []\n  const AppDispatcher = createAppDispatcher()\n\n  /* eslint-disable no-use-before-define */\n  return {\n    /**\n     *\n     * This actually creates _and_ registers a store.\n     *\n     * @param {String} channel\n     * @param {Map<String,*>} ActionTypes - map of action types\n     * @param {Map<ActionType,Function>} Reducers - map of reducers indexed by ActionType\n     * @param {Map<ActionType,Function>} ActionFunctions - map of action functions indexed by\n     * ActionTypes\n     * @param {Map<String,Function>} ActionObservables (optional) - higher order functions\n     * that take the StoreStateObservable as input and return an observable that selects parts\n     * of the state tree. **This will probably be deprecated.**\n     * @function\n     */\n    registerStore: registerStore({AppState, stores, AppDispatcher}),\n    create: create({AppState, stores, AppDispatcher}),\n\n    get stores() { return stores },\n    get sagas() { return sagaInfo }\n  }\n}\n\nfunction registerStore({AppState, stores, AppDispatcher}) {\n  return function _registerStore(\n    channel,\n    {ActionTypes, Reducers, ActionFunctions, ActionObservables}) {\n\n    // first create the store\n    const store = createStore(\n      channel,\n      {ActionTypes, Reducers, ActionFunctions, ActionObservables}\n    )(AppDispatcher)\n\n    // then add store to store info collection\n    stores.push(store)\n\n    // then create the new appStateObservable\n    const stateWithSideEffectsObservables =\n      stores.map(x => x.stateWithSideEffectsObservable)\n    const appStateObservable = Kefir.combine(\n      // this fires when any of the store state observables change\n      stateWithSideEffectsObservables,\n      // this combines all the store states into a single state\n      (...observables) => observables.reduce(\n        (appStateObservable, state, i) => Object.assign(\n          appStateObservable,\n          {[`${stores[i].name}`]: state.state}\n        ),\n        {}\n      )\n    )\n\n    // new app state is observable + store\n    Object.assign(AppState, {appStateObservable, ...store.store})\n  }\n}\n\n\nexport function registerSagas(channel, {Sagas, SagaActionFunctions, SagaHandlers}) {\n\n  const sagas = createSagas(channel, {Sagas, SagaActionFunctions, SagaHandlers})(AppDispatcher)\n\n  // store\n  _sagaInfo.push(sagas)\n\n  // add action functions and result observables to app state\n  Object.assign(AppState, sagas.actionFunctions, sagas.resultObservables)\n\n  // setup one-way data flow\n  const callback = () => undefined\n\n  Object.keys(sagas.observables).forEach(obs => sagas.observables[obs].onValue(callback))\n}\n\n\nexport function create({AppState, stores, AppDispatcher}) {\n  return function __create() {\n    if (stores.length === 0) {\n      throw new Error('You didn\\'t register any stores!')\n    }\n\n    // setup one-way data flow + side effects\n    stores.map(store => store.stateWithSideEffectsObservable.onValue(state =>\n      (state.sideEffects || []).forEach(\n        sideEffect => setTimeout(() => AppDispatcher.emit(sideEffect), 0)\n      )\n    ))\n\n    return AppState\n  }\n}\n"]}