{"version":3,"sources":["appStateFactory.js"],"names":["appStateFactory","_registerSagas","_create","middleware","AppState","stores","sagas","AppDispatcher","registerStore","_registerStore","registerSagas","create","_stores","_sagas","__registerStore","channel","ActionTypes","Reducers","ActionFunctions","ActionObservables","store","push","stateWithSideEffectsObservables","map","x","stateWithSideEffectsObservable","appStateObservable","combine","observables","reduce","state","i","Object","assign","name","__registerSagas","Sagas","SagaActionFunctions","SagaHandlers","actionFunctions","resultObservables","callback","undefined","keys","forEach","obs","onValue","__create","length","Error","sideEffects","setTimeout","emit","sideEffect"],"mappings":";;;;;;;;kBAQwBA,e;QAoERC,c,GAAAA,c;QAmBAC,O,GAAAA,O;;AA/FhB;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAGe,SAASF,eAAT,GAA0C;AAAA,MAAjBG,UAAiB,uEAAJ,EAAI;;AACvD,MAAMC,WAAW,EAAjB;AACA,MAAMC,SAAS,EAAf;AACA,MAAMC,QAAQ,EAAd;AACA,MAAMC,gBAAgB,oCAAtB;;AAEA;AACA,SAAO;AACL;;;;;;;;;;;;;;AAcAC,mBAAeC,eAAe,EAACL,kBAAD,EAAWC,cAAX,EAAmBE,4BAAnB,EAAf,CAfV;AAgBLG,mBAAeT,eAAe,EAACG,kBAAD,EAAf,CAhBV;AAiBLE,WAAO,2BAAYC,aAAZ,CAjBF;AAkBLI,YAAQT,QAAQ,EAACE,kBAAD,EAAWC,cAAX,EAAmBE,4BAAnB,EAAR,CAlBH;;AAoBL,QAAIK,OAAJ,GAAc;AAAE,aAAOP,MAAP;AAAe,KApB1B;AAqBL,QAAIQ,MAAJ,GAAa;AAAE,aAAOP,KAAP;AAAc;AArBxB,GAAP;AAuBD;;AAED,SAASG,cAAT,OAA2D;AAAA,MAAlCL,QAAkC,QAAlCA,QAAkC;AAAA,MAAxBC,MAAwB,QAAxBA,MAAwB;AAAA,MAAhBE,aAAgB,QAAhBA,aAAgB;;AACzD,SAAO,SAASO,eAAT,CACLC,OADK,SAEwD;AAAA,QAA5DC,WAA4D,SAA5DA,WAA4D;AAAA,QAA/CC,QAA+C,SAA/CA,QAA+C;AAAA,QAArCC,eAAqC,SAArCA,eAAqC;AAAA,QAApBC,iBAAoB,SAApBA,iBAAoB;;;AAE7D;AACA,QAAMC,QAAQ,2BACZL,OADY,EAEZ,EAACC,wBAAD,EAAcC,kBAAd,EAAwBC,gCAAxB,EAAyCC,oCAAzC,EAFY,EAGZZ,aAHY,CAAd;;AAKA;AACAF,WAAOgB,IAAP,CAAYD,KAAZ;;AAEA;AACA,QAAME,kCACJjB,OAAOkB,GAAP,CAAW;AAAA,aAAKC,EAAEC,8BAAP;AAAA,KAAX,CADF;AAEA,QAAMC,qBAAqB,gBAAMC,OAAN;AACzB;AACAL,mCAFyB;AAGzB;AACA;AAAA,wCAAIM,WAAJ;AAAIA,mBAAJ;AAAA;;AAAA,aAAoBA,YAAYC,MAAZ,CAClB,UAACH,kBAAD,EAAqBI,KAArB,EAA4BC,CAA5B;AAAA,eAAkCC,OAAOC,MAAP,CAChCP,kBADgC,2BAE3BrB,OAAO0B,CAAP,EAAUG,IAFiB,EAERJ,MAAMA,KAFE,EAAlC;AAAA,OADkB,EAKlB,EALkB,CAApB;AAAA,KAJyB,CAA3B;;AAaA;AACAE,WAAOC,MAAP,CAAc7B,QAAd,aAAyBsB,sCAAzB,IAAgDN,MAAMA,KAAtD;AACD,GA/BD;AAgCD;;AAGM,SAASnB,cAAT,QAA0D;AAAA,MAAjCG,QAAiC,SAAjCA,QAAiC;AAAA,MAAvBE,KAAuB,SAAvBA,KAAuB;AAAA,MAAhBC,aAAgB,SAAhBA,aAAgB;;AAC/D,SAAO,SAAS4B,eAAT,CAAyBpB,OAAzB,SAA8E;AAAA,QAA3CqB,KAA2C,SAA3CA,KAA2C;AAAA,QAApCC,mBAAoC,SAApCA,mBAAoC;AAAA,QAAfC,YAAe,SAAfA,YAAe;;;AAEnF,QAAMzB,SAAS,2BAAYE,OAAZ,EAAqB,EAACqB,YAAD,EAAQC,wCAAR,EAA6BC,0BAA7B,EAArB,EAAiE/B,aAAjE,CAAf;;AAEA;AACAD,UAAMe,IAAN,CAAWR,MAAX;;AAEA;AACAmB,WAAOC,MAAP,CAAc7B,QAAd,EAAwBS,OAAO0B,eAA/B,EAAgD1B,OAAO2B,iBAAvD;;AAEA;AACA,QAAMC,WAAW,SAAXA,QAAW;AAAA,aAAMC,SAAN;AAAA,KAAjB;;AAEAV,WAAOW,IAAP,CAAY9B,OAAOe,WAAnB,EAAgCgB,OAAhC,CAAwC;AAAA,aAAO/B,OAAOe,WAAP,CAAmBiB,GAAnB,EAAwBC,OAAxB,CAAgCL,QAAhC,CAAP;AAAA,KAAxC;AACD,GAdD;AAeD;;AAGM,SAASvC,OAAT,QAAoD;AAAA,MAAlCE,QAAkC,SAAlCA,QAAkC;AAAA,MAAxBC,MAAwB,SAAxBA,MAAwB;AAAA,MAAhBE,aAAgB,SAAhBA,aAAgB;;AACzD,SAAO,SAASwC,QAAT,GAAoB;AACzB,QAAI1C,OAAO2C,MAAP,KAAkB,CAAtB,EAAyB;AACvB,YAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED;AACA5C,WAAOkB,GAAP,CAAW;AAAA,aAASH,MAAMK,8BAAN,CAAqCqB,OAArC,CAA6C;AAAA,eAC/D,CAAChB,MAAMoB,WAAN,IAAqB,EAAtB,EAA0BN,OAA1B,CACE;AAAA,iBAAcO,WAAW;AAAA,mBAAM5C,cAAc6C,IAAd,CAAmBC,UAAnB,CAAN;AAAA,WAAX,EAAiD,CAAjD,CAAd;AAAA,SADF,CAD+D;AAAA,OAA7C,CAAT;AAAA,KAAX;;AAMA,WAAOjD,QAAP;AACD,GAbD;AAcD","file":"appStateFactory.js","sourcesContent":["import Kefir from 'kefir'\n\nimport createAppDispatcher from './appdispatcher/createAppDispatcher'\nimport createStore from './stores/createStore'\nimport createSagas from './stores/createSagas'\nimport sagaFactory from './stores/sagaFactory'\n\n\nexport default function appStateFactory(middleware = []) {\n  const AppState = {}\n  const stores = []\n  const sagas = []\n  const AppDispatcher = createAppDispatcher()\n\n  /* eslint-disable no-use-before-define */\n  return {\n    /**\n     *\n     * This actually creates _and_ registers a store.\n     *\n     * @param {String} channel\n     * @param {Map<String,*>} ActionTypes - map of action types\n     * @param {Map<ActionType,Function>} Reducers - map of reducers indexed by ActionType\n     * @param {Map<ActionType,Function>} ActionFunctions - map of action functions indexed by\n     * ActionTypes\n     * @param {Map<String,Function>} ActionObservables (optional) - higher order functions\n     * that take the StoreStateObservable as input and return an observable that selects parts\n     * of the state tree. **This will probably be deprecated.**\n     * @function\n     */\n    registerStore: _registerStore({AppState, stores, AppDispatcher}),\n    registerSagas: _registerSagas({AppState}),\n    sagas: sagaFactory(AppDispatcher),\n    create: _create({AppState, stores, AppDispatcher}),\n\n    get _stores() { return stores },\n    get _sagas() { return sagas }\n  }\n}\n\nfunction _registerStore({AppState, stores, AppDispatcher}) {\n  return function __registerStore(\n    channel,\n    {ActionTypes, Reducers, ActionFunctions, ActionObservables}) {\n\n    // first create the store\n    const store = createStore(\n      channel,\n      {ActionTypes, Reducers, ActionFunctions, ActionObservables}\n    )(AppDispatcher)\n\n    // then add store to store info collection\n    stores.push(store)\n\n    // then create the new appStateObservable\n    const stateWithSideEffectsObservables =\n      stores.map(x => x.stateWithSideEffectsObservable)\n    const appStateObservable = Kefir.combine(\n      // this fires when any of the store state observables change\n      stateWithSideEffectsObservables,\n      // this combines all the store states into a single state\n      (...observables) => observables.reduce(\n        (appStateObservable, state, i) => Object.assign(\n          appStateObservable,\n          {[`${stores[i].name}`]: state.state}\n        ),\n        {}\n      )\n    )\n\n    // new app state is observable + store\n    Object.assign(AppState, {appStateObservable, ...store.store})\n  }\n}\n\n\nexport function _registerSagas({AppState, sagas, AppDispatcher}) {\n  return function __registerSagas(channel, {Sagas, SagaActionFunctions, SagaHandlers}) {\n\n    const _sagas = createSagas(channel, {Sagas, SagaActionFunctions, SagaHandlers})(AppDispatcher)\n\n    // store\n    sagas.push(_sagas)\n\n    // add action functions and result observables to app state\n    Object.assign(AppState, _sagas.actionFunctions, _sagas.resultObservables)\n\n    // setup one-way data flow\n    const callback = () => undefined\n\n    Object.keys(_sagas.observables).forEach(obs => _sagas.observables[obs].onValue(callback))\n  }\n}\n\n\nexport function _create({AppState, stores, AppDispatcher}) {\n  return function __create() {\n    if (stores.length === 0) {\n      throw new Error('You didn\\'t register any stores!')\n    }\n\n    // setup one-way data flow + side effects\n    stores.map(store => store.stateWithSideEffectsObservable.onValue(state =>\n      (state.sideEffects || []).forEach(\n        sideEffect => setTimeout(() => AppDispatcher.emit(sideEffect), 0)\n      )\n    ))\n\n    return AppState\n  }\n}\n"]}