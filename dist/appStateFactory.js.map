{"version":3,"sources":["appStateFactory.js"],"names":["appStateFactory","stores","rawStores","sagas","rawSagas","middleware","length","Error","InitialAppDispatcher","dispatch","emit","Middleware","rawMiddleware","AppDispatcher","attachMiddleware","_createStores","appStateObservable","_createAppStateObservable","map","setState","state","sagaInterface","_createSagas","_setupStoreObs","_setupSagaObs","AppState","_storesToState","_sagasToState","args","s","storeStatesWithSideEffectsObservables","x","stateWithSideEffectsObservable","combine","observables","reduce","i","Object","assign","name","store","saga","actionFunctions","resultObservables","forEach","onValue","sideEffects","setTimeout","sideEffect","keys","_sagas","obs","undefined"],"mappings":";;;;;;;;kBAiCwBA,e;;AAjCxB;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AAwBe,SAASA,eAAT,OAKV;AAAA,yBAHDC,MAGC;AAAA,MAHOC,SAGP,+BAHmB,EAGnB;AAAA,wBAFDC,KAEC;AAAA,MAFMC,QAEN,8BAFiB,EAEjB;AAAA,6BADDC,UACC;AAAA,MADDA,UACC,mCADY,EACZ;;;AAEH;AACA,MAAIH,UAAUI,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;AACD;AACA,MAAMC,uBAAuB,oCAA7B;AACA,MAAMC,WAAW,SAAXA,QAAW;AAAA,WAAaD,qBAAqBE,IAArB,uCAAb;AAAA,GAAjB;AACA,MAAMC,aAAa,iCAAkB,EAACF,kBAAD,EAAWG,eAAeP,UAA1B,EAAlB,CAAnB;AACA,MAAMQ,gBAAgBF,WAAWG,gBAAX,CAA4B,EAACD,eAAeL,oBAAhB,EAA5B,CAAtB;AACA;AACA,MAAMP,SAASc,cAAc,EAACb,oBAAD,EAAYW,4BAAZ,EAAd,CAAf;AACA,MAAMG,qBACJC,0BAA0B,EAAChB,cAAD,EAA1B;AACA;AACA;AACA;AAHA,GAIGiB,GAJH,CAIO,iBAAS;AACZP,eAAWQ,QAAX,CAAoBC,KAApB;AACA,WAAOA,KAAP;AACD,GAPH,CADF;AASA,MAAMC,gBAAgB,oCAAqB,EAACR,4BAAD,EAAgBG,sCAAhB,EAArB,CAAtB;AACA,MAAMb,QAAQmB,aAAa,EAAClB,kBAAD,EAAWS,4BAAX,EAA0BQ,4BAA1B,EAAb,CAAd;;AAEAE,iBAAe,EAACtB,cAAD,EAASY,4BAAT,EAAf;AACAW,gBAAc,EAACrB,YAAD,EAAd;;AAEA,MAAMsB;AACJT;AADI,KAEDU,eAAe,EAACzB,cAAD,EAAf,CAFC,EAGD0B,cAAc,EAACxB,YAAD,EAAd,CAHC,CAAN;;AAMA,SAAO;AACLsB,sBADK;AAELZ;AAFK,GAAP;AAID;;AAED,SAASE,aAAT,QAA6C;AAAA,MAArBb,SAAqB,SAArBA,SAAqB;AAAA,MAAP0B,IAAO;;AAC3C,SAAO1B,UAAUgB,GAAV,CAAc;AAAA,WAAK,2BAAYW,CAAZ,eAAmBD,IAAnB,EAAL;AAAA,GAAd,CAAP;AACD;;AAED,SAASN,YAAT,QAA2C;AAAA,MAApBlB,QAAoB,SAApBA,QAAoB;AAAA,MAAPwB,IAAO;;AACzC,SAAOxB,SAASc,GAAT,CAAa;AAAA,WAAK,2BAAYW,CAAZ,eAAmBD,IAAnB,EAAL;AAAA,GAAb,CAAP;AACD;;AAED,SAASX,yBAAT,QAA6C;AAAA,MAAThB,MAAS,SAATA,MAAS;;AAC3C;AACA,MAAM6B,wCAAwC7B,OAAOiB,GAAP,CAAW;AAAA,WAAKa,EAAEC,8BAAP;AAAA,GAAX,CAA9C;;AAEA;AACA,SAAO,gBAAMC,OAAN;AACL;AACAH,uCAFK;AAGL;AACA;AAAA,sCAAII,WAAJ;AAAIA,iBAAJ;AAAA;;AAAA,WAAoBA,YAAYC,MAAZ,CAClB,UAACnB,kBAAD,EAAqBI,KAArB,EAA4BgB,CAA5B;AAAA,aAAkCC,OAAOC,MAAP,CAChCtB,kBADgC,2BAE3Bf,OAAOmC,CAAP,EAAUG,IAFiB,EAERnB,MAAMA,KAFE,EAAlC;AAAA,KADkB,EAKlB,EALkB,CAApB;AAAA,GAJK,CAAP;AAYD;;AAED,SAASM,cAAT,QAAkC;AAAA,MAATzB,MAAS,SAATA,MAAS;;AAChC,SAAOA,OAAOkC,MAAP,CAAc,UAACf,KAAD,EAAQoB,KAAR;AAAA,wBAAuBpB,KAAvB,EAAiCoB,MAAMA,KAAvC;AAAA,GAAd,EAA8D,EAA9D,CAAP;AACD;;AAED,SAASb,aAAT,QAAgC;AAAA,MAARxB,KAAQ,SAARA,KAAQ;;AAC9B;AACA,SAAOA,MAAMgC,MAAN,CAAa,UAACf,KAAD,EAAQqB,IAAR;AAAA,wBAAsBrB,KAAtB,EAAgCqB,KAAKC,eAArC,EAAyDD,KAAKE,iBAA9D;AAAA,GAAb,EAAgG,EAAhG,CAAP;AACD;;AAED,SAASpB,cAAT,QAAiD;AAAA,MAAxBtB,MAAwB,SAAxBA,MAAwB;AAAA,MAAhBY,aAAgB,SAAhBA,aAAgB;;AAC/C;AACAZ,SAAO2C,OAAP,CAAe;AAAA,WAASJ,MAAMR,8BAAN,CAAqCa,OAArC,CAA6C;AAAA,aACnE,CAACzB,MAAM0B,WAAN,IAAqB,EAAtB,EAA0BF,OAA1B,CACE;AAAA,eAAcG,WAAW;AAAA,iBAAMlC,cAAcH,IAAd,CAAmBsC,UAAnB,CAAN;AAAA,SAAX,EAAiD,CAAjD,CAAd;AAAA,OADF,CADmE;AAAA,KAA7C,CAAT;AAAA,GAAf;AAKD;;AAED,SAASxB,aAAT,QAAgC;AAAA,MAARrB,KAAQ,SAARA,KAAQ;;AAC9B;AACAA,QAAMyC,OAAN,CAAc;AAAA,WACZP,OAAOY,IAAP,CAAYC,OAAOhB,WAAnB,EAAgCU,OAAhC,CAAwC;AAAA,aAAOM,OAAOhB,WAAP,CAAmBiB,GAAnB,EAAwBN,OAAxB,CAAgC;AAAA,eAAMO,SAAN;AAAA,OAAhC,CAAP;AAAA,KAAxC,CADY;AAAA,GAAd;AAGD","file":"appStateFactory.js","sourcesContent":["import Kefir from 'kefir'\n\nimport createAppDispatcher from './appdispatcher/createAppDispatcher'\nimport createStore from './stores/createStore'\nimport createSagas from './stores/createSagas'\nimport sagaInterfaceFactory from './stores/sagaInterfaceFactory'\nimport middlewareFactory from './redux/middlewareFactory'\n\n\n/**\n * A store consists of:\n * - a name (channel)\n * - map of ActionTypes\n * - map of Reducers indexed by ActionType\n * - map of ActionFunctions indexed by ActionType\n *\n * See `createStore` for more details.\n *\n * A saga consists of:\n * - a name (channel)\n * - map of ActionTypes\n * - SagaHandlersFn higher order function that accepts a `sagas` interface and returns the SagaHandlers.\n *\n * See `createSagas` for more details.\n *\n * A middleware is function with the following signature:\n * store => next => action\n *\n * @param {Stores[]} stores\n * @param {Sagas[]} sagas\n * @param {Middleware[]} middleware\n * @returns {{AppState, AppDispatcher}} the AppState and its dispatcher to send messages.\n */\nexport default function appStateFactory(\n  {\n    stores: rawStores = [],\n    sagas: rawSagas = [],\n    middleware = []\n  }) {\n\n  /* eslint-disable no-use-before-define */\n  if (rawStores.length === 0) {\n    throw new Error('You didn\\'t add any stores!')\n  }\n  // first setup internal fixtures\n  const InitialAppDispatcher = createAppDispatcher()\n  const dispatch = (...args) => InitialAppDispatcher.emit(...args)\n  const Middleware = middlewareFactory({dispatch, rawMiddleware: middleware})\n  const AppDispatcher = Middleware.attachMiddleware({AppDispatcher: InitialAppDispatcher})\n  // then setup public structures\n  const stores = _createStores({rawStores, AppDispatcher})\n  const appStateObservable =\n    _createAppStateObservable({stores})\n    // inject the state back into Middleware, so that getState works. Unfortunately, in kefirjs,\n    // there is no way to do a side effect w/o activating the stream. So we use `map` for side effects\n    // (which is technically an antipattern).\n      .map(state => {\n        Middleware.setState(state)\n        return state\n      })\n  const sagaInterface = sagaInterfaceFactory({AppDispatcher, appStateObservable})\n  const sagas = _createSagas({rawSagas, AppDispatcher, sagaInterface})\n\n  _setupStoreObs({stores, AppDispatcher})\n  _setupSagaObs({sagas})\n\n  const AppState = {\n    appStateObservable,\n    ..._storesToState({stores}),\n    ..._sagasToState({sagas})\n  }\n\n  return {\n    AppState,\n    AppDispatcher\n  }\n}\n\nfunction _createStores({rawStores, ...args}) {\n  return rawStores.map(s => createStore(s)({...args}))\n}\n\nfunction _createSagas({rawSagas, ...args}) {\n  return rawSagas.map(s => createSagas(s)({...args}))\n}\n\nfunction _createAppStateObservable({stores}) {\n  // first create the new appStateObservable\n  const storeStatesWithSideEffectsObservables = stores.map(x => x.stateWithSideEffectsObservable)\n\n  // then combine these into the appStateObservable\n  return Kefir.combine(\n    // this fires when any of the store state observables change\n    storeStatesWithSideEffectsObservables,\n    // this combines all the store states into a single state\n    (...observables) => observables.reduce(\n      (appStateObservable, state, i) => Object.assign(\n        appStateObservable,\n        {[`${stores[i].name}`]: state.state}\n      ),\n      {}\n    )\n  )\n}\n\nfunction _storesToState({stores}) {\n  return stores.reduce((state, store) => ({...state, ...store.store}), {})\n}\n\nfunction _sagasToState({sagas}) {\n  // add action functions and result observables to app state\n  return sagas.reduce((state, saga) => ({...state, ...saga.actionFunctions, ...saga.resultObservables}), {})\n}\n\nfunction _setupStoreObs({stores, AppDispatcher}) {\n  // setup one-way data flow + side effects\n  stores.forEach(store => store.stateWithSideEffectsObservable.onValue(state =>\n    (state.sideEffects || []).forEach(\n      sideEffect => setTimeout(() => AppDispatcher.emit(sideEffect), 0)\n    )\n  ))\n}\n\nfunction _setupSagaObs({sagas}) {\n  // setup one-way data flow\n  sagas.forEach(_sagas =>\n    Object.keys(_sagas.observables).forEach(obs => _sagas.observables[obs].onValue(() => undefined))\n  )\n}\n\n\n\n"]}