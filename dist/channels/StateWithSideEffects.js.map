{"version":3,"sources":["channels/StateWithSideEffects.js"],"names":["state","StateWithSideEffects","sideEffects","b","concat"],"mappings":";;;;;;;;;;QAqDgBA,K,GAAAA,K;;;;AArDhB;;;;;;;;;IASqBC,oB;;AAEnB;;;;AAIA,gCAAYD,KAAZ,EAAmBE,WAAnB,EAAgC;AAAA;;AAE9B,SAAKF,KAAL,GAAaA,SAAS,EAAtB;AACA,SAAKE,WAAL,GAAmBA,eAAe,EAAlC;AACD;;AAED;;;;;;;;;4BAKQC,C,EAAG;;AAET,aAAOA,aAAaF,oBAAb,GAEL,IAAIA,oBAAJ,cACM,KAAKD,KADX,EACqBG,EAAEH,KADvB,GAEE,KAAKE,WAAL,CAAiBE,MAAjB,CAAwBD,EAAED,WAA1B,CAFF,CAFK,GAOL,IAAID,oBAAJ,EAA0B,aAAI,KAAKD,KAAT,EAAmBG,CAAnB,GAAuB,KAAKD,WAAtD,EAPF;AAQD;;;qCAE8B;AAAA,wCAAbA,WAAa;AAAbA,mBAAa;AAAA;;AAE7B,aAAO,IAAID,oBAAJ,cACD,KAAKD,KADJ,GAEL,KAAKE,WAAL,CAAiBE,MAAjB,CAAwBF,WAAxB,CAFK,CAAP;AAID;;;;;;AAGH;;;;;;;;kBAtCqBD,oB;AA4Cd,SAASD,KAAT,GAA2B;AAAA,MAAZA,KAAY,uEAAJ,EAAI;;;AAEhC,SAAO,IAAIC,oBAAJ,CAAyBD,KAAzB,CAAP;AACD","file":"StateWithSideEffects.js","sourcesContent":["/**\n * Hey, look! Something like a monad (dang, forget I said the \"m\" word.)\n *\n * `StateWithSideEffects` is basically state plus an array of messages (the side\n * effects to be executed).\n *\n * You can combine it with State or with another StateWithSideEffects, or add side\n * effects to an existing StateWithSideEffects.\n */\nexport default class StateWithSideEffects {\n\n  /**\n   * @param {State} state\n   * @param {Message[]} sideEffects\n   */\n  constructor(state, sideEffects) {\n\n    this.state = state || {}\n    this.sideEffects = sideEffects || []\n  }\n\n  /**\n   * Can combine `StateWithSideEffects` with another `StateWithSideEffects` or with state.\n   * @param {StateWithSideEffects|State} b\n   * @returns {StateWithSideEffects} the result\n   */\n  combine(b) {\n\n    return b instanceof StateWithSideEffects ?\n\n      new StateWithSideEffects(\n        {...this.state, ...b.state},\n        this.sideEffects.concat(b.sideEffects)\n      ) :\n\n      new StateWithSideEffects(({...this.state, ...b}, this.sideEffects))\n  }\n\n  addSideEffects(...sideEffects) {\n\n    return new StateWithSideEffects(\n      {...this.state},\n      this.sideEffects.concat(sideEffects)\n    )\n  }\n}\n\n/**\n * Constructor helper\n *\n * @param {State} state\n * @returns {StateWithSideEffects} instance\n */\nexport function state(state = {}) {\n\n  return new StateWithSideEffects(state)\n}\n"]}