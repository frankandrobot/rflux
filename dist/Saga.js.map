{"version":3,"sources":["Saga.js"],"names":[],"mappings":";;;;;;QAyBgB,G,GAAA,G;QAOA,I,GAAA,I;QASA,M,GAAA,M;QAiBA,M,GAAA,M;;AA1DhB;;;;AACA;;;;AAEA;;;;AACA;;AAEA;;;;AACA;;;;;;AAGO,IAAM,oCAAc,6BAApB;;AAEP,IAAM,iBAAiB,YACpB,MADoB,CACb;AAAA,SAAU,OAAO,MAAP,KAAkB,MAA5B;AAAA,CADa,EAEpB,GAFoB,CAEhB;AAAA,SAAU,OAAO,OAAjB;AAAA,CAFgB,EAGpB,OAHoB,CAGZ,kBAAU;;AAEjB,MAAM,OAAO,OAAO,IAApB;AACA,MAAM,SAAS,OAAO,EAAP,kCAAa,OAAO,IAApB,EAAf;AACA,MAAM,mBAAmB,8BAAa,MAAb,IAAuB,MAAvB,GAAgC,gBAAM,QAAN,CAAe,MAAf,CAAzD;;AAEA,SAAO,iBAAiB,GAAjB,CAAqB;AAAA,WAAS,EAAC,UAAD,EAAO,UAAP,EAAT;AAAA,GAArB,CAAP;AACD,CAVoB,EAWpB,OAXoB,CAWZ;AAAA,SAAM,SAAN;AAAA,CAXY,CAAvB;;AAaO,SAAS,GAAT,CAAa,MAAb,EAAqB;;AAE1B,aAAW;AAAA,WAAM,wBAAc,IAAd,CAAmB,MAAnB,CAAN;AAAA,GAAX,EAA6C,CAA7C;;AAEA,SAAO,gBAAM,QAAN,CAAe,MAAf,CAAP,C;AACD;;AAEM,SAAS,IAAT,CAAc,EAAd,EAA2B;AAAA,oCAAN,IAAM;AAAN,QAAM;AAAA;;AAEhC,MAAM,KAAK,eAAK,EAAL,EAAX;;AAEA,aAAW;AAAA,WAAM,YAAY,IAAZ,CAAiB,EAAC,QAAQ,MAAT,EAAiB,SAAS,EAAC,MAAD,EAAK,UAAL,EAAW,MAAM,EAAjB,EAA1B,EAAjB,CAAN;AAAA,GAAX,EAAoF,CAApF;;AAEA,SAAO,eAAe,MAAf,CAAsB;AAAA,WAAM,GAAG,IAAH,KAAY,EAAlB;AAAA,GAAtB,EAA4C,GAA5C,CAAgD;AAAA,WAAM,GAAG,IAAT;AAAA,GAAhD,EAA+D,IAA/D,CAAoE,CAApE,CAAP;AACD;;AAEM,SAAS,MAAT,CAAgB,kBAAhB,EAAoC;;AAEzC,SAAO,gBAAQ;;AAEb,QAAM,SAAS;AACb,eAAS,oBAAS,MADL;AAEb,kBAAY,uBAAY,gBAFX;AAGb,4CAHa;AAIb,eAAS;AAJI,KAAf;;AAOA,eAAW;AAAA,aAAM,YAAY,IAAZ,CAAiB,EAAC,QAAQ,KAAT,EAAgB,SAAS,MAAzB,EAAjB,CAAN;AAAA,KAAX,EAAqE,CAArE;;AAEA,WAAO,IAAP;AACD,GAZD;AAaD;;AAEM,SAAS,MAAT,CAAgB,OAAhB,EAAyB,UAAzB,EAAqC;;AAE1C,SAAO,wBACJ,MADI,CACG;AAAA,WAAU,OAAO,OAAP,KAAmB,OAAnB,IAA8B,OAAO,UAAP,KAAsB,UAA9D;AAAA,GADH,EAEJ,GAFI,CAEA;AAAA,WAAU,OAAO,OAAjB;AAAA,GAFA,CAAP;AAGD","file":"Saga.js","sourcesContent":["import uuid from 'uuid'\nimport Kefir from 'kefir'\n\nimport kefirEmitter from './support/kefirEmitter'\nimport {isObservable} from './support/kefirUtils'\n\nimport AppDispatcher from './AppDispatcher'\nimport {Channels, ActionTypes} from './Constants'\n\n\nexport const sideEffects = kefirEmitter()\n\nconst callObservable = sideEffects\n  .filter(action => action.action === 'CALL')\n  .map(action => action.payload)\n  .flatMap(action => {\n\n    const uuid = action.uuid\n    const result = action.fn(...action.args)\n    const resultObservable = isObservable(result) ? result : Kefir.constant(result)\n\n    return resultObservable.map(rslt => ({uuid, rslt}))\n  })\n  .onValue(() => undefined)\n\nexport function put(action) {\n\n  setTimeout(() => AppDispatcher.emit(action), 0)\n\n  return Kefir.constant(action) // streamified so we can chain together\n}\n\nexport function call(fn, ...args) {\n\n  const id = uuid.v4()\n\n  setTimeout(() => sideEffects.emit({action: 'CALL', payload: {fn, args, uuid: id}}), 0)\n\n  return callObservable.filter(fn => fn.uuid === id).map(fn => fn.rslt).take(1)\n}\n\nexport function result(__sideEffectCallId) {\n\n  return rslt => {\n\n    const action = {\n      channel: Channels.system,\n      actionType: ActionTypes.sideEffectResult,\n      __sideEffectCallId,\n      payload: rslt\n    }\n\n    setTimeout(() => sideEffects.emit({action: 'PUT', payload: action}), 0)\n\n    return rslt\n  }\n}\n\nexport function listen(channel, actionType) {\n\n  return AppDispatcher\n    .filter(action => action.channel === channel && action.actionType === actionType)\n    .map(action => action.payload)\n}\n"]}