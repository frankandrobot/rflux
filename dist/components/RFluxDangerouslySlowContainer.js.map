{"version":3,"sources":["components/RFluxDangerouslySlowContainer.js"],"names":[],"mappings":";;;;;;;;;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmBqB,6B;;;AAEnB,yCAAY,KAAZ,EAAmB;AAAA;;AAAA,4GAEX,KAFW;AAGlB;;;;yCAEoB;;AAEnB,WAAK,WAAL,GAAmB,0CAAmB,KAAK,KAAxB,CAAnB;AACA,WAAK,WAAL,GAAmB,uCAAgB,IAAhB,EAAsB,KAAK,KAA3B,CAAnB;AACA,WAAK,SAAL,GAAiB,4CAAqB,IAArB,EAA2B,KAAK,WAAhC,EAA6C,KAAK,KAAL,CAAW,QAAX,CAAoB,IAApB,CAAyB,YAAtE,CAAjB;AACD;;;8CAEyB,S,EAAW;;AAEnC,WAAK,WAAL,GAAmB,0CAAmB,SAAnB,CAAnB;;;AAGA,mDAAsB,KAAK,WAA3B,EAAwC,KAAK,SAA7C;;;AAGA,WAAK,WAAL,GAAmB,uCAAgB,SAAhB,CAAnB;AACA,WAAK,SAAL,GAAiB,4CAAqB,IAArB,EAA2B,KAAK,WAAhC,EAA6C,KAAK,KAAL,CAAW,QAAX,CAAoB,IAApB,CAAyB,YAAtE,CAAjB;AACD;;;2CAEsB;;AAErB,mDAAsB,KAAK,WAA3B,EAAwC,KAAK,SAA7C;AACD;;;6BAEQ;AAAA;;AAEP;AACE,cAAM,KAAK,KAAL,CAAW,QAAX,CAAoB;AAD5B,+BAEG,UAFH,EAEgB,OAAO,GAAP,CAAW,eAAX,CAFhB,+CAGa,KAAK,KAHlB,EAG4B,KAAK,WAHjC;AAKD;;;;EAtCwD,gBAAM,S;;kBAA5C,6B","file":"RFluxDangerouslySlowContainer.js","sourcesContent":["/* eslint no-use-before-define:0 */\nimport React from 'react'\n\nimport {nonObservableState, observableState} from '../internal/ContainerHelpers'\nimport {removeObservableState, setupObservableState} from '../internal/ContainerHelpers'\n\n\n/**\n * The differences between this class and RFluxContainer is:\n *\n * 1. You setup the observable via React props (not state)\n * 2. That means observers need to be recreated each time the Container's props change.\n *    (Hence, the \"dangerously slow\" name. Recreating observers on prop changes can be slow).\n * 3. You do NOT inherit from this class. Instead you can use it directly.\n *\n * ```javascript\n * render() {\n *   // \"Child\" has *values* from `observable` (not the stream itself) available as props.\n *   return <Container observable1={observable1}> <Child/> </Container>\n * }\n * ```\n */\nexport default class RFluxDangerouslySlowContainer extends React.Component {\n\n  constructor(props) {\n\n    super(props)\n  }\n\n  componentWillMount() {\n\n    this.normalProps = nonObservableState(this.props)\n    this.observables = observableState(this, this.props)\n    this.callbacks = setupObservableState(this, this.observables, this.props.children.type.defaultProps)\n  }\n\n  componentWillReceiveProps(nextProps) {\n\n    this.normalProps = nonObservableState(nextProps)\n\n    //unsub previous\n    removeObservableState(this.observables, this.callbacks)\n\n    //subscribe new\n    this.observables = observableState(nextProps)\n    this.callbacks = setupObservableState(this, this.observables, this.props.children.type.defaultProps)\n  }\n\n  componentWillUnmount() {\n\n    removeObservableState(this.observables, this.callbacks)\n  }\n\n  render() {\n\n    return {\n      type: this.props.children.type,\n      ['$$typeof']: Symbol.for('react.element'),\n      props: {...this.state, ...this.normalProps}\n    }\n  }\n}\n"]}