{"version":3,"sources":["components/createSimpleContainer.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;AAee,SAAS,eAAT,OACmF;AAAA,kCAA/F,eAA+F;;AAAA,MAA/F,gBAA+F,wCAA7E;AAAA,WAAO,EAAP;AAAA,GAA6E;;AAAA,mCAAjE,yBAAiE;AAAA,MAAjE,yBAAiE,yCAArC;AAAA,WAAO,EAAP;AAAA,GAAqC;AAAA,mCAAzB,iBAAyB;AAAA,MAAzB,iBAAyB,yCAAL,EAAK;AAAA,8BAEpC,iBAFoC,CAEzF,SAFyF;AAAA,MAEzF,SAFyF,yCAE7E,EAF6E;AAAA,8BAEpC,iBAFoC,CAEzE,eAFyE;;AAAA,MAEzE,gBAFyE,yCAEvD;AAAA,WAAM,SAAN;AAAA,GAFuD;;AAIhG,SAAO;AAAA,WAAgC,gBAAM,WAAN,CAAkB;;AAEvD,iBAAW,SAF4C;;AAIvD,qBAJuD,6BAIrC;AAChB,eAAO,iBAAgB,IAAhB,CAAqB,IAArB,CAAP;AACD,OANsD;AAQvD,qBARuD,6BAQrC;AAChB,eAAO,kBAAP;AACD,OAVsD;AAYvD,wBAZuD,gCAYlC;;AAEnB,YAAM,0BAA0B,0BAA0B,IAA1B,CAA+B,IAA/B,CAAhC;;AAEA,aAAK,gBAAL,GAAwB,uCAAgB,uBAAhB,CAAxB;AACA,aAAK,mBAAL,GAA2B,0CAAmB,uBAAnB,CAA3B;;AAEA,aAAK,UAAL,GAAkB,4CAAqB,IAArB,EAA2B,KAAK,gBAAhC,CAAlB;AACD,OApBsD;AAsBvD,0BAtBuD,kCAsBhC;;AAErB,qDAAsB,KAAK,gBAA3B,EAA6C,KAAK,UAAlD;AACD,OAzBsD;AA2BvD,YA3BuD,oBA2B9C;AACP,eAAO,8BAAC,4BAAD,eAAkC,KAAK,KAAvC,EAAkD,KAAK,mBAAvD,EAAgF,KAAK,KAArF,EAAP;AACD;AA7BsD,KAAlB,CAAhC;AAAA,GAAP;AA+BD","file":"createSimpleContainer.js","sourcesContent":["import React from 'react'\n\nimport {nonObservableState, observableState} from '../internal/ContainerHelpers'\nimport {removeObservableState, setupObservableState} from '../internal/ContainerHelpers'\n\n\n/**\n * If a prop is an observable, create a listener and pass the observed values as props.\n * Otherwise, pass the prop into the child component, which must be a stateless functional component.\n *\n * The use case is when you don't need access to other parts of the state.\n *\n * @param defaultState - the default container state\n * @param getInitialObservableState - passed to child container as props\n * @param containerDefaults - default props and propTypes of parent container\n * @returns {Function}\n */\nexport default function createContainer(\n  {getInitialState = () => ({}), getInitialObservableState = () => ({}), containerDefaults = {}}) {\n\n  const {propTypes = {}, getDefaultProps = () => undefined} = containerDefaults\n\n  return StatelessFunctionalComponent => React.createClass({\n\n    propTypes: propTypes,\n\n    getInitialState() {\n      return getInitialState.call(this)\n    },\n\n    getDefaultProps() {\n      return getDefaultProps()\n    },\n\n    componentWillMount() {\n\n      const _initialObservableState = getInitialObservableState.call(this)\n\n      this._observableState = observableState(_initialObservableState)\n      this._nonObservableState = nonObservableState(_initialObservableState)\n\n      this._callbacks = setupObservableState(this, this._observableState)\n    },\n\n    componentWillUnmount() {\n\n      removeObservableState(this._observableState, this._callbacks)\n    },\n\n    render() {\n      return <StatelessFunctionalComponent {...this.state} {...this._nonObservableState} {...this.props} />\n    }\n  })\n}\n"]}