{"version":3,"sources":["components/createSimpleContainer.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;AAee,SAAS,eAAT,OAC4E;AAAA,kCAAxF,eAAwF;;AAAA,MAAxF,gBAAwF,wCAAtE;AAAA,WAAO,EAAP;AAAA,GAAsE;;AAAA,mCAA1D,kBAA0D;AAAA,MAA1D,kBAA0D,yCAArC;AAAA,WAAO,EAAP;AAAA,GAAqC;AAAA,mCAAzB,iBAAyB;AAAA,MAAzB,iBAAyB,yCAAL,EAAK;AAAA,8BAE7B,iBAF6B,CAElF,SAFkF;AAAA,MAElF,SAFkF,yCAEtE,EAFsE;AAAA,8BAE7B,iBAF6B,CAElE,eAFkE;;AAAA,MAElE,gBAFkE,yCAEhD;AAAA,WAAM,SAAN;AAAA,GAFgD;;AAIzF,SAAO;AAAA,WAAgC,gBAAM,WAAN,CAAkB;;AAEvD,iBAAW,SAF4C;;AAIvD,qBAJuD,6BAIrC;AAChB,eAAO,iBAAgB,IAAhB,CAAqB,IAArB,CAAP;AACD,OANsD;AAQvD,qBARuD,6BAQrC;AAChB,eAAO,kBAAP;AACD,OAVsD;AAYvD,wBAZuD,gCAYlC;;AAEnB,YAAM,kBAAkB,mBAAmB,IAAnB,CAAwB,IAAxB,CAAxB;AACA,YAAM,qBAAqB,mBAAmB,eAAnB,CAA3B;;AAEA,YAAI,OAAO,IAAP,CAAY,kBAAZ,EAAgC,MAApC,EAA4C;AAC1C,kBAAQ,IAAR,CACE,6GAC2B,kBAD3B,CADF;AAGD;;AAED,aAAK,gBAAL,GAAwB,gBAAgB,eAAhB,CAAxB;AACA,aAAK,UAAL,GAAkB,4CAAqB,IAArB,EAA2B,KAAK,gBAAhC,CAAlB;AACD,OAzBsD;AA2BvD,0BA3BuD,kCA2BhC;;AAErB,qDAAsB,KAAK,gBAA3B,EAA6C,KAAK,UAAlD;AACD,OA9BsD;AAgCvD,YAhCuD,oBAgC9C;AACP,eAAO,8BAAC,4BAAD,eAAkC,KAAK,KAAvC,EAAkD,KAAK,KAAvD,EAAP;AACD;AAlCsD,KAAlB,CAAhC;AAAA,GAAP;AAoCD","file":"createSimpleContainer.js","sourcesContent":["import React from 'react'\n\nimport {nonObservableState, observableState} from '../internal/ContainerHelpers'\nimport {removeObservableState, setupObservableState} from '../internal/ContainerHelpers'\n\n\n/**\n * If a prop is an observable, create a listener and pass the observed values as props.\n * Otherwise, pass the prop into the child component, which must be a stateless functional component.\n *\n * The use case is when you don't need access to other parts of the state.\n *\n * @param getInitialState - the default container state\n * @param getObservableState - passed to child container as props\n * @param containerDefaults - default props and propTypes of parent container\n * @returns {Function}\n */\nexport default function createContainer(\n  {getInitialState = () => ({}), getObservableState = () => ({}), containerDefaults = {}}) {\n\n  const {propTypes = {}, getDefaultProps = () => undefined} = containerDefaults\n\n  return StatelessFunctionalComponent => React.createClass({\n\n    propTypes: propTypes,\n\n    getInitialState() {\n      return getInitialState.call(this)\n    },\n\n    getDefaultProps() {\n      return getDefaultProps()\n    },\n\n    componentWillMount() {\n\n      const observableState = getObservableState.call(this)\n      const nonObservableState = nonObservableState(observableState)\n\n      if (Object.keys(nonObservableState).length) {\n        console.warn(\n          'Passed non-observable state in #getObservableState. Use #getInitialState. ' +\n          `It will have no effect: ${nonObservableState}`)\n      }\n\n      this._observableState = observableState(observableState)\n      this._callbacks = setupObservableState(this, this._observableState)\n    },\n\n    componentWillUnmount() {\n\n      removeObservableState(this._observableState, this._callbacks)\n    },\n\n    render() {\n      return <StatelessFunctionalComponent {...this.state} {...this.props} />\n    }\n  })\n}\n"]}