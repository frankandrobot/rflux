{"version":3,"sources":["components/createDangerouslySlowContainer.js"],"names":["createDangerouslySlowContainer","getDefaultProps","getInitialState","getObservableState","propTypes","__dangerouslyEnableSlowness","createClass","call","componentWillMount","observableState","componentWillReceiveProps","componentWillUnmount","render","props","state"],"mappings":";;;;;;;;;AAAA;;;;AAEA;;;;AAOA;;;;;;;;;;;;;;;;;;;AAmBe,SAASA,8BAAT,OAMV;AAAA,kCALHC,eAKG;AAAA,MALHA,gBAKG,wCALe;AAAA,WAAO,EAAP;AAAA,GAKf;AAAA,kCAJHC,eAIG;AAAA,MAJHA,gBAIG,wCAJe;AAAA,WAAO,EAAP;AAAA,GAIf;AAAA,mCAHHC,kBAGG;AAAA,MAHHA,kBAGG,yCAHkB;AAAA,WAAO,EAAP;AAAA,GAGlB;AAAA,4BAFHC,SAEG;AAAA,MAFHA,SAEG,kCAFS,EAET;AAAA,mCADHC,2BACG;AAAA,MADHA,2BACG,yCAD2B,IAC3B;;AAEH,SAAO;AAAA,WAAgC,gBAAMC,WAAN,CAAkB;;AAEvDF,iBAAWA,SAF4C;;AAIvDF,qBAJuD,6BAIrC;AAChB,eAAOA,iBAAgBK,IAAhB,CAAqB,IAArB,CAAP;AACD,OANsD;AAQvDN,qBARuD,6BAQrC;AAChB,eAAOA,kBAAP;AACD,OAVsD;AAYvDO,wBAZuD,gCAYlC;;AAEnB,YAAMC,kBAAkBN,mBAAmBI,IAAnB,CAAwB,IAAxB,CAAxB;;AAEA,mDAAoB,IAApB,EAA0BE,eAA1B;AACA,gDAAiB,IAAjB,EAAuBA,eAAvB;AACD,OAlBsD;AAoBvDC,+BApBuD,uCAoB3B;;AAE1B,YAAIL,2BAAJ,EAAiC;;AAE/B,cAAMI,kBAAkBN,mBAAmBI,IAAnB,CAAwB,IAAxB,CAAxB;;AAEA,mDAAkB,IAAlB;AACA,kDAAiB,IAAjB,EAAuBE,eAAvB;AACD;AACF,OA7BsD;AA+BvDE,0BA/BuD,kCA+BhC;;AAErB,iDAAkB,IAAlB;AACD,OAlCsD;AAoCvDC,YApCuD,oBAoC9C;AACP,eAAO,8BAAC,4BAAD,eAAkC,KAAKC,KAAvC,EAAkD,KAAKC,KAAvD,EAAP;AACD;AAtCsD,KAAlB,CAAhC;AAAA,GAAP;AAwCD","file":"createDangerouslySlowContainer.js","sourcesContent":["import React from 'react'\n\nimport {\n  removeObservables,\n  setupNonObservables,\n  setupObservables\n} from '../internal/ContainerHelpers'\n\n\n/**\n * Supports parent React props at the expense of potentially being inefficient:\n *\n * > Every #componentWillReceiveProps forces observer re-initialization.\n * > Therefore it is your responsibility to ensure that it doesn't get called too often.\n *\n * Since container props and state both get mapped as child props,\n * state overriddes props with the same name.\n *\n * Do NOT use anonymous functions to define getInitialState, getObservableState,\n * getDefaultProps!\n *\n * @param {Function} getDefaultProps - container default props. Passed to child as props.\n * @param {Function} getInitialState - container initial state. Passed to child as props.\n * @param {Function} getObservableState - pass observables here. Observable *values*\n * passed to child as props\n * @param {*} propTypes - container propTypes.\n * @returns {Function} that returns the container\n */\nexport default function createDangerouslySlowContainer({\n  getDefaultProps = () => ({}),\n  getInitialState = () => ({}),\n  getObservableState = () => ({}),\n  propTypes = {},\n  __dangerouslyEnableSlowness = true\n  }) {\n\n  return StatelessFunctionalComponent => React.createClass({\n\n    propTypes: propTypes,\n\n    getInitialState() {\n      return getInitialState.call(this)\n    },\n\n    getDefaultProps() {\n      return getDefaultProps()\n    },\n\n    componentWillMount() {\n\n      const observableState = getObservableState.call(this)\n\n      setupNonObservables(this, observableState)\n      setupObservables(this, observableState)\n    },\n\n    componentWillReceiveProps() {\n\n      if (__dangerouslyEnableSlowness) {\n\n        const observableState = getObservableState.call(this)\n\n        removeObservables(this)\n        setupObservables(this, observableState)\n      }\n    },\n\n    componentWillUnmount() {\n\n      removeObservables(this)\n    },\n\n    render() {\n      return <StatelessFunctionalComponent {...this.props} {...this.state} />\n    }\n  })\n}\n"]}