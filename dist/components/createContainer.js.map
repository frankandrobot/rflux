{"version":3,"sources":["components/createContainer.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCe,SAAS,eAAT,OAII;AAAA,kCAHjB,eAGiB;;AAAA,MAHjB,gBAGiB,wCAHC;AAAA,WAAO,EAAP;AAAA,GAGD;;AAAA,mCAFjB,kBAEiB;AAAA,MAFjB,kBAEiB,yCAFI;AAAA,WAAO,EAAP;AAAA,GAEJ;AAAA,kCADjB,eACiB;;AAAA,MADjB,gBACiB,wCADC;AAAA,WAAO,EAAP;AAAA,GACD;;AAAA,4BAAjB,SAAiB;AAAA,MAAjB,SAAiB,kCAAL,EAAK;;;AAEjB,SAAO;AAAA,WAAgC,gBAAM,WAAN,CAAkB;;AAEvD,iBAAW,SAF4C;;AAIvD,qBAJuD,6BAIrC;AAChB,eAAO,iBAAgB,IAAhB,CAAqB,IAArB,CAAP;AACD,OANsD;AAQvD,qBARuD,6BAQrC;AAChB,eAAO,kBAAP;AACD,OAVsD;AAYvD,wBAZuD,gCAYlC;;AAEnB,YAAM,mBAAmB,mBAAmB,IAAnB,CAAwB,IAAxB,CAAzB;AACA,YAAM,sBAAsB,0CAAmB,gBAAnB,CAA5B;;AAEA,aAAK,QAAL,CAAc,mBAAd;;AAEA,aAAK,gBAAL,GAAwB,uCAAgB,gBAAhB,CAAxB;AACA,aAAK,UAAL,GAAkB,4CAAqB,IAArB,EAA2B,KAAK,gBAAhC,CAAlB;AACD,OArBsD;AAuBvD,0BAvBuD,kCAuBhC;;AAErB,qDAAsB,KAAK,gBAA3B,EAA6C,KAAK,UAAlD;AACD,OA1BsD;AA4BvD,YA5BuD,oBA4B9C;AACP,eAAO,8BAAC,4BAAD,eAAkC,KAAK,KAAvC,EAAkD,KAAK,KAAvD,EAAP;AACD;AA9BsD,KAAlB,CAAhC;AAAA,GAAP;AAgCD","file":"createContainer.js","sourcesContent":["import React from 'react'\n\nimport {nonObservableState, observableState} from '../internal/ContainerHelpers'\nimport {removeObservableState, setupObservableState} from '../internal/ContainerHelpers'\n\n\n/**\n * The container passes React props and state to its child as props.\n * The main feature is that it converts observables into *values*...\n * while automagically managing the observer lifecycle.\n *\n * Since container props and state both get mapped as child props,\n * please be aware that state overriddes props with the same name.\n *\n * Do NOT use anonymous functions to define getInitialState, getObservableState, getDefaultProps!\n *\n * ```javascript\n * createContainer({\n *   getObservableState() {\n *     return {\n *       value: observable.map(x => x.foo)\n *     }\n *   }\n * })(Child)\n *\n * const Child = value => <div>{value}</div> //gets the value of the observable as a prop!\n * ```\n *\n * @param getInitialState - container initial state. Passed to child as props.\n * @param getObservableState - pass observables here. Observable *values* passed to child as props\n * @param getDefaultProps - container default props. Passed to child as props.\n * @param propTypes - container propTypes.\n * @returns {Function}\n */\nexport default function createContainer({\n  getInitialState = () => ({}),\n  getObservableState = () => ({}),\n  getDefaultProps = () => ({}),\n  propTypes = {}}) {\n\n  return StatelessFunctionalComponent => React.createClass({\n\n    propTypes: propTypes,\n\n    getInitialState() {\n      return getInitialState.call(this)\n    },\n\n    getDefaultProps() {\n      return getDefaultProps()\n    },\n\n    componentWillMount() {\n\n      const _observableState = getObservableState.call(this)\n      const _nonObservableState = nonObservableState(_observableState)\n\n      this.setState(_nonObservableState)\n\n      this._observableState = observableState(_observableState)\n      this._callbacks = setupObservableState(this, this._observableState)\n    },\n\n    componentWillUnmount() {\n\n      removeObservableState(this._observableState, this._callbacks)\n    },\n\n    render() {\n      return <StatelessFunctionalComponent {...this.props} {...this.state} />\n    }\n  })\n}\n"]}