{"version":3,"sources":["components/RFluxContainer.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmCqB,c;;;AAEnB,0BAAY,KAAZ,EAAmB;AAAA;;AAAA,kGAEX,KAFW;;AAIjB,QAAM,OAAO,SAAP,IAAO;AAAA,aAAO,EAAP;AAAA,KAAb;AACA,QAAM,eAAe,CAAC,MAAK,yBAAL,IAAkC,IAAnC,GAArB;;AAEA,UAAK,gBAAL,GAAwB,uCAAgB,YAAhB,CAAxB;AACA,UAAK,mBAAL,GAA2B,0CAAmB,YAAnB,CAA3B;AARiB;AASlB;;;;yCAEoB;;AAEnB,WAAK,UAAL,GAAkB,4CAAqB,IAArB,EAA2B,KAAK,gBAAhC,CAAlB;AACD;;;2CAEsB;;AAErB,mDAAsB,KAAK,gBAA3B,EAA6C,KAAK,UAAlD;AACD;;;6BAEQ;AAAA;;AAEP;AACE,cAAM,KAAK,OAAL,CAAa,QAAb,CAAsB;AAD9B,+BAEG,UAFH,EAEgB,OAAO,GAAP,CAAW,eAAX,CAFhB,+CAGa,KAAK,KAHlB,EAG4B,KAAK,mBAHjC;AAKD;;;;EA9ByC,gBAAM,S;;kBAA7B,c","file":"RFluxContainer.js","sourcesContent":["import React from 'react'\n\nimport {nonObservableState, observableState} from '../internal/ContainerHelpers'\nimport {removeObservableState, setupObservableState} from '../internal/ContainerHelpers'\n\n/**\n * The difference between this class RFluxDangerouslySlowContainer is:\n *\n * 1. You set observables via React state (not props).\n *    This means that you set observables exactly once for the life of the component.\n *    See below for a workaround.\n * 2. You need to inherit this class in order to use it.\n * 3. The use case is when you need access to parts of the state (most cases).\n *\n * ```javascript\n * class Container extends RFluxContainer {\n *   constructor(props) {\n *     super(props);\n *     this.state = { foo: 'initial value' }\n *   }\n *\n *   getInitialObservableState() {\n *      return {\n *         foo: observable1,\n *         randomfoo: () => this.setState({foo: Math.random()})\n *      }\n *   }\n * }\n *\n * export default () => <Container> <Child/> </Container>\n * ```\n *\n * # What if observables are functions of React properties?\n *\n * Actually this probably isn't an issue anymore.\n * If so then RFFluxDangerouslySlowContainer can be safely deprecated.\n */\nexport default class RFluxContainer extends React.Component {\n\n  constructor(props) {\n\n    super(props)\n\n    const noop = () => ({})\n    const initialState = (this.getInitialObservableState || noop)()\n\n    this._observableState = observableState(initialState)\n    this._nonObservableState = nonObservableState(initialState)\n  }\n\n  componentWillMount() {\n\n    this._callbacks = setupObservableState(this, this._observableState)\n  }\n\n  componentWillUnmount() {\n\n    removeObservableState(this._observableState, this._callbacks)\n  }\n\n  render() {\n\n    return {\n      type: this.reprops.children.type,\n      ['$$typeof']: Symbol.for('react.element'),\n      props: {...this.state, ...this._nonObservableState}\n    }\n  }\n}\n\n"]}