{"version":3,"sources":["createSideEffects.js"],"names":[],"mappings":";;;;;kBAwBwB,iB;;AAxBxB;;;;AAEA;;AACA;;;;AAGA,SAAS,0BAAT,CAAoC,OAApC,EAA6C,kBAA7C,EAAiE;;AAE/D,SAAO,UAAC,aAAD,EAAgB,QAAhB;AAAA,WAEL,cACG,MADH,CACU;AAAA,aAAK,EAAE,OAAF,KAAc,OAAnB;AAAA,KADV,EAEG,OAFH,CAEW,kBAAU;;AAEjB,UAAM,UAAU,mBAAmB,OAAO,UAA1B,CAAhB;;AAEA,UAAI,CAAC,OAAL,EAAc;AACZ,cAAM,IAAI,KAAJ,cAAqB,OAArB,uCAA8D,OAAO,UAArE,OAAN;AACD;;AAED,aAAO,QAAQ,OAAO,OAAf,EAAwB,QAAxB,EAAkC,kBAAO,OAAO,kBAAd,CAAlC,CAAP;AACD,KAXH,CAFK;AAAA,GAAP;AAcD;;AAEc,SAAS,iBAAT,CAA2B,OAA3B,QAAkG;AAAA,MAA7D,WAA6D,QAA7D,WAA6D;AAAA,MAAhD,yBAAgD,QAAhD,yBAAgD;AAAA,MAArB,kBAAqB,QAArB,kBAAqB;;;AAE/G,wBAAO,OAAO,OAAP,KAAmB,QAA1B,EAAoC,6CAApC;AACA,wBAAO,WAAP,EAAoB,kBAApB;AACA,wBAAO,yBAAP,EAAkC,gCAAlC;AACA,wBAAO,kBAAP,EAA2B,yBAA3B;;;AAGA,SAAO,IAAP,CAAY,WAAZ,EAAyB,OAAzB,CAAiC,kBAAU;AACzC,0BAAO,0BAA0B,MAA1B,CAAP,eAAqD,OAArD,oDAA2G,MAA3G;AACA,0BAAO,mBAAmB,MAAnB,CAAP,eAA8C,OAA9C,4CAA4F,MAA5F;AACD,GAHD;;AAKA,SAAO,UAAC,aAAD,EAAgB,QAAhB;AAAA,WAA8B;AACnC,YAAM,OAD6B;AAEnC,kBAAY,2BAA2B,OAA3B,EAAoC,kBAApC,EAAwD,aAAxD,EAAuE,QAAvE,CAFuB;AAGnC,mBAAa,sCAAoB,yBAApB,EAA+C,aAA/C;AAHsB,KAA9B;AAAA,GAAP;AAKD","file":"createSideEffects.js","sourcesContent":["import assert from './support/assert'\n\nimport {result} from './Saga'\nimport {bindActionFunctions} from './createStore'\n\n\nfunction _bindSideEffectsObservable(channel, SideEffectHandlers) {\n\n  return (AppDispatcher, AppState) =>\n\n    AppDispatcher\n      .filter(x => x.channel === channel)\n      .flatMap(action => {\n\n        const handler = SideEffectHandlers[action.actionType]\n\n        if (!handler) {\n          throw new Error(`Channel ${channel} does not support side effect \"${action.actionType}\"`)\n        }\n\n        return handler(action.payload, AppState, result(action.__sideEffectCallId))\n      })\n}\n\nexport default function createSideEffects(channel, {SideEffects, SideEffectActionFunctions, SideEffectHandlers}) {\n\n  assert(typeof channel === 'string', 'Needs a channel and it needs to be a string')\n  assert(SideEffects, 'Need SideEffects')\n  assert(SideEffectActionFunctions, 'Need SideEffectActionFunctions')\n  assert(SideEffectHandlers, 'Need SideEffectHandlers')\n\n  //every side effect must map to an action function and handler\n  Object.keys(SideEffects).forEach(action => {\n    assert(SideEffectActionFunctions[action], `Channel ${channel} is missing side effect action function for ${action}`)\n    assert(SideEffectHandlers[action], `Channel ${channel} is missing side effect handler for ${action}`)\n  })\n\n  return (AppDispatcher, AppState) => ({\n    name: channel,\n    observable: _bindSideEffectsObservable(channel, SideEffectHandlers)(AppDispatcher, AppState),\n    sideEffects: bindActionFunctions(SideEffectActionFunctions)(AppDispatcher)\n  })\n}\n"]}